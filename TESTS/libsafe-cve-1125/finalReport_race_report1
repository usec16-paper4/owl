+ '[' '!' 2 -eq 2 ']'
+ TEST_DIR=TESTS/libsafe-cve-1125
+ CONANAL_DIR=lib/ConAnal
+ DOL_DIR=lib/DOL
+ BITCODE_DIR=TESTS/libsafe-cve-1125
+ opt -mem2reg libsafe-cve-1125.bc -o libsafe-cve-1125.mem2reg
+ mv libsafe-cve-1125.mem2reg libsafe-cve-1125.bc
+ opt -debug-only=con-analysis -load ../../lib/DOL/libDOL.so --danFuncFile danMemFuncLists.txt -load ../../lib/ConAnal/libConAnalysis.so -ConAnalysis ../../../TESTS/libsafe-cve-1125/libsafe-cve-1125.bc --ptrderef --danfunc --raceReport race_report1
---------------------------------------
           Start DOL Pass              
---------------------------------------
Read 17 dangerous functions from danMemFuncLists.txt

---------------------------------------
       Start ConAnalysis Pass          
---------------------------------------

FUNCTION _libsafe_stackVariableP

BASIC BLOCK entry
%1:	alloca	XXX 
%2:	call	XXX XXX XXX XXX llvm.dbg.value 
%3:	call	XXX XXX XXX XXX llvm.dbg.value 
%4:	load	dying 
%5:	br	%4 if.end return 

BASIC BLOCK if.end
%6:	bitcast	%1 
%7:	call	XXX XXX XXX XXX llvm.dbg.value 
%8:	icmp	%6 addr 
%9:	br	%8 if.end2 return 

BASIC BLOCK if.end2
%10:	call	XXX llvm.frameaddress 
%11:	call	XXX XXX XXX XXX llvm.dbg.value 
%12:	store	%10 %1 
%13:	icmp	%1 XXX 
%14:	br	%13 cond.false cond.end7 

BASIC BLOCK cond.false
%15:	icmp	%1 XXX 
%16:	br	%15 cond.false6 cond.end7 

BASIC BLOCK cond.false6
%17:	ptrtoint	%1 
%18:	and	%17 XXX 
%19:	or	%18 XXX 
%20:	inttoptr	%19 
%21:	br	cond.end7 

BASIC BLOCK cond.end7
%22:	phi	XXX %20 XXX 
%23:	call	XXX XXX XXX XXX llvm.dbg.value 
%24:	call	XXX XXX XXX XXX llvm.dbg.value 
%25:	icmp	%6 %10 
%26:	icmp	%10 %22 
%27:	or	%25 %26 
%28:	br	%27 while.body.preheader return 

BASIC BLOCK while.body.preheader
%29:	br	while.body 

BASIC BLOCK while.body
%30:	phi	%34 %10 
%31:	icmp	%30 addr 
%32:	br	%31 if.end17 while.end 

BASIC BLOCK if.end17
%33:	bitcast	%30 
%34:	load	%33 
%35:	call	XXX XXX XXX XXX llvm.dbg.value 
%36:	ptrtoint	%34 
%37:	and	%36 XXX 
%38:	icmp	%37 XXX 
%39:	br	%38 if.then20 if.end21 

BASIC BLOCK if.then20
%40:	store	XXX _libsafe_exclude 
%41:	br	return 

BASIC BLOCK if.end21
%42:	icmp	%34 %30 
%43:	br	%42 if.then24 if.end25 

BASIC BLOCK if.then24
%44:	store	XXX _libsafe_exclude 
%45:	br	return 

BASIC BLOCK if.end25
%46:	call	XXX XXX XXX XXX llvm.dbg.value 
%47:	store	%34 %1 
%48:	call	XXX XXX XXX XXX llvm.dbg.value 
%49:	icmp	%6 %34 
%50:	icmp	%34 %22 
%51:	or	%49 %50 
%52:	br	%51 while.body return.loopexit84 

BASIC BLOCK while.end
%53:	phi	%30 
%54:	ptrtoint	%53 
%55:	ptrtoint	addr 
%56:	sub	%54 %55 
%57:	trunc	%56 
%58:	call	XXX XXX XXX XXX llvm.dbg.value 
%59:	icmp	%57 XXX 
%60:	br	%59 while.cond30.preheader return 

BASIC BLOCK while.cond30.preheader
%61:	call	XXX XXX XXX XXX llvm.dbg.value 
%62:	icmp	%6 %53 
%63:	icmp	%53 %22 
%64:	or	%62 %63 
%65:	br	%64 while.body37.preheader return 

BASIC BLOCK while.body37.preheader
%66:	br	while.body37 

BASIC BLOCK while.body37
%67:	phi	%69 %53 
%68:	bitcast	%67 
%69:	load	%68 
%70:	call	XXX XXX XXX XXX llvm.dbg.value 
%71:	icmp	%69 XXX 
%72:	br	%71 if.end41 return.loopexit 

BASIC BLOCK if.end41
%73:	ptrtoint	%69 
%74:	and	%73 XXX 
%75:	icmp	%74 XXX 
%76:	br	%75 if.then44 if.end45 

BASIC BLOCK if.then44
%77:	store	XXX _libsafe_exclude 
%78:	br	return 

BASIC BLOCK if.end45
%79:	icmp	%69 %67 
%80:	br	%79 if.then48 if.end49 

BASIC BLOCK if.then48
%81:	store	XXX _libsafe_exclude 
%82:	br	return 

BASIC BLOCK if.end49
%83:	call	XXX XXX XXX XXX llvm.dbg.value 
%84:	store	%69 %1 
%85:	call	XXX XXX XXX XXX llvm.dbg.value 
%86:	icmp	%6 %69 
%87:	icmp	%69 %22 
%88:	or	%86 %87 
%89:	br	%88 while.body37 return.loopexit 

BASIC BLOCK return.loopexit
%90:	phi	%57 XXX 
%91:	br	return 

BASIC BLOCK return.loopexit84
%92:	br	return 

BASIC BLOCK return
%93:	phi	XXX XXX XXX XXX XXX XXX XXX XXX XXX %90 XXX 
%94:	ret	%93 

FUNCTION llvm.dbg.declare

FUNCTION llvm.frameaddress

FUNCTION _libsafe_save_ra_fp

BASIC BLOCK entry
%95:	alloca	XXX 
%96:	call	XXX XXX XXX XXX llvm.dbg.value 
%97:	call	XXX XXX XXX XXX llvm.dbg.value 
%98:	call	XXX XXX XXX XXX llvm.dbg.value 
%99:	call	XXX XXX XXX XXX llvm.dbg.value 
%100:	call	XXX XXX XXX XXX llvm.dbg.value 
%101:	call	XXX XXX XXX XXX llvm.dbg.value 
%102:	load	dying 
%103:	br	%102 if.end return 

BASIC BLOCK if.end
%104:	bitcast	%95 
%105:	call	XXX XXX XXX XXX llvm.dbg.value 
%106:	call	XXX llvm.frameaddress 
%107:	call	XXX XXX XXX XXX llvm.dbg.value 
%108:	store	%106 %95 
%109:	icmp	%106 %104 
%110:	br	%109 return if.end2 

BASIC BLOCK if.end2
%111:	icmp	%95 XXX 
%112:	br	%111 cond.false cond.end7 

BASIC BLOCK cond.false
%113:	icmp	%95 XXX 
%114:	br	%113 cond.false6 cond.end7 

BASIC BLOCK cond.false6
%115:	ptrtoint	%95 
%116:	and	%115 XXX 
%117:	or	%116 XXX 
%118:	inttoptr	%117 
%119:	br	cond.end7 

BASIC BLOCK cond.end7
%120:	phi	XXX %118 XXX 
%121:	call	XXX XXX XXX XXX llvm.dbg.value 
%122:	call	XXX XXX XXX XXX llvm.dbg.value 
%123:	icmp	%106 %120 
%124:	br	%123 while.body.preheader return 

BASIC BLOCK while.body.preheader
%125:	br	while.body 

BASIC BLOCK while.body
%126:	phi	%148 %106 
%127:	phi	%130 XXX 
%128:	phi	%136 ra_array 
%129:	phi	%141 fp_array 
%130:	add	%127 XXX 
%131:	icmp	%130 maxcount 
%132:	br	%131 return.loopexit if.end15 

BASIC BLOCK if.end15
%133:	getelementptr	%126 XXX 
%134:	bitcast	%133 
%135:	load	%134 
%136:	getelementptr	%128 XXX 
%137:	call	XXX XXX XXX XXX llvm.dbg.value 
%138:	store	%135 %128 
%139:	call	XXX XXX XXX XXX llvm.dbg.value 
%140:	load	%95 
%141:	getelementptr	%129 XXX 
%142:	call	XXX XXX XXX XXX llvm.dbg.value 
%143:	store	%140 %129 
%144:	call	XXX XXX XXX XXX llvm.dbg.value 
%145:	call	XXX XXX XXX XXX llvm.dbg.value 
%146:	load	%95 
%147:	bitcast	%146 
%148:	load	%147 
%149:	call	XXX XXX XXX XXX llvm.dbg.value 
%150:	icmp	%148 XXX 
%151:	br	%150 if.end20 return.loopexit 

BASIC BLOCK if.end20
%152:	ptrtoint	%148 
%153:	and	%152 XXX 
%154:	icmp	%153 XXX 
%155:	br	%154 if.then23 if.end24 

BASIC BLOCK if.then23
%156:	store	XXX _libsafe_exclude 
%157:	br	return 

BASIC BLOCK if.end24
%158:	icmp	%148 %146 
%159:	br	%158 if.then27 if.end28 

BASIC BLOCK if.then27
%160:	store	XXX _libsafe_exclude 
%161:	br	return 

BASIC BLOCK if.end28
%162:	call	XXX XXX XXX XXX llvm.dbg.value 
%163:	store	%148 %95 
%164:	call	XXX XXX XXX XXX llvm.dbg.value 
%165:	icmp	%148 %120 
%166:	br	%165 while.body return.loopexit 

BASIC BLOCK return.loopexit
%167:	phi	XXX %130 XXX 
%168:	br	return 

BASIC BLOCK return
%169:	phi	XXX XXX XXX XXX XXX %167 
%170:	ret	%169 

FUNCTION _libsafe_verify_ra_fp

BASIC BLOCK entry
%171:	alloca	XXX 
%172:	call	XXX XXX XXX XXX llvm.dbg.value 
%173:	call	XXX XXX XXX XXX llvm.dbg.value 
%174:	call	XXX XXX XXX XXX llvm.dbg.value 
%175:	call	XXX XXX XXX XXX llvm.dbg.value 
%176:	call	XXX XXX XXX XXX llvm.dbg.value 
%177:	call	XXX XXX XXX XXX llvm.dbg.value 
%178:	load	dying 
%179:	br	%178 if.end return 

BASIC BLOCK if.end
%180:	bitcast	%171 
%181:	call	XXX XXX XXX XXX llvm.dbg.value 
%182:	call	XXX llvm.frameaddress 
%183:	call	XXX XXX XXX XXX llvm.dbg.value 
%184:	store	%182 %171 
%185:	icmp	%182 %180 
%186:	br	%185 return if.end2 

BASIC BLOCK if.end2
%187:	icmp	%171 XXX 
%188:	br	%187 cond.false cond.end7 

BASIC BLOCK cond.false
%189:	icmp	%171 XXX 
%190:	br	%189 cond.false6 cond.end7 

BASIC BLOCK cond.false6
%191:	ptrtoint	%171 
%192:	and	%191 XXX 
%193:	or	%192 XXX 
%194:	inttoptr	%193 
%195:	br	cond.end7 

BASIC BLOCK cond.end7
%196:	phi	XXX %194 XXX 
%197:	call	XXX XXX XXX XXX llvm.dbg.value 
%198:	call	XXX XXX XXX XXX llvm.dbg.value 
%199:	icmp	%182 %196 
%200:	br	%199 while.body.preheader return 

BASIC BLOCK while.body.preheader
%201:	br	while.body 

BASIC BLOCK while.body
%202:	phi	%251 %182 
%203:	phi	%219 XXX 
%204:	phi	%206 ra_array 
%205:	phi	%214 fp_array 
%206:	getelementptr	%204 XXX 
%207:	call	XXX XXX XXX XXX llvm.dbg.value 
%208:	load	%204 
%209:	getelementptr	%202 XXX 
%210:	bitcast	%209 
%211:	load	%210 
%212:	icmp	%208 %211 
%213:	br	%212 for.cond.preheader lor.lhs.false 

BASIC BLOCK lor.lhs.false
%214:	getelementptr	%205 XXX 
%215:	call	XXX XXX XXX XXX llvm.dbg.value 
%216:	load	%205 
%217:	icmp	%216 %202 
%218:	br	%217 for.cond.preheader lor.lhs.false16 

BASIC BLOCK lor.lhs.false16
%219:	add	%203 XXX 
%220:	call	XXX XXX XXX XXX llvm.dbg.value 
%221:	icmp	%203 maxcount 
%222:	br	%221 if.end26 for.cond.preheader 

BASIC BLOCK for.cond.preheader
%223:	phi	%202 %202 %202 
%224:	phi	%219 %203 %203 
%225:	icmp	%224 maxcount 
%226:	br	%225 return for.body.lr.ph 

BASIC BLOCK for.body.lr.ph
%227:	bitcast	%171 
%228:	sext	%224 
%229:	add	maxcount XXX 
%230:	br	for.body 

BASIC BLOCK for.body
%231:	phi	%223 %248 
%232:	phi	%228 %247 
%233:	getelementptr	ra_array %232 
%234:	load	%233 
%235:	call	XXX XXX XXX XXX llvm.dbg.value 
%236:	getelementptr	%231 XXX 
%237:	bitcast	%236 
%238:	store	%234 %237 
%239:	getelementptr	fp_array %232 
%240:	load	%239 
%241:	call	XXX XXX XXX XXX llvm.dbg.value 
%242:	load	%227 
%243:	store	%240 %242 
%244:	trunc	%232 
%245:	icmp	%244 %229 
%246:	br	%245 for.body.for.body_crit_edge return.loopexit 

BASIC BLOCK for.body.for.body_crit_edge
%247:	add	%232 XXX 
%248:	load	%171 
%249:	br	for.body 

BASIC BLOCK if.end26
%250:	bitcast	%202 
%251:	load	%250 
%252:	call	XXX XXX XXX XXX llvm.dbg.value 
%253:	icmp	%251 XXX 
%254:	br	%253 if.end30 return.loopexit50 

BASIC BLOCK if.end30
%255:	call	XXX XXX XXX XXX llvm.dbg.value 
%256:	store	%251 %171 
%257:	call	XXX XXX XXX XXX llvm.dbg.value 
%258:	icmp	%251 %196 
%259:	br	%258 while.body return.loopexit50 

BASIC BLOCK return.loopexit
%260:	br	return 

BASIC BLOCK return.loopexit50
%261:	phi	XXX XXX 
%262:	br	return 

BASIC BLOCK return
%263:	phi	XXX XXX XXX XXX XXX %261 
%264:	ret	%263 

FUNCTION _libsafe_raVariableP

BASIC BLOCK entry
%265:	alloca	XXX 
%266:	call	XXX XXX XXX XXX llvm.dbg.value 
%267:	call	XXX XXX XXX XXX llvm.dbg.value 
%268:	load	dying 
%269:	br	%268 if.end return 

BASIC BLOCK if.end
%270:	bitcast	%265 
%271:	call	XXX XXX XXX XXX llvm.dbg.value 
%272:	icmp	%270 addr 
%273:	br	%272 if.end2 return 

BASIC BLOCK if.end2
%274:	call	XXX llvm.frameaddress 
%275:	call	XXX XXX XXX XXX llvm.dbg.value 
%276:	store	%274 %265 
%277:	icmp	%265 XXX 
%278:	br	%277 cond.false cond.end7 

BASIC BLOCK cond.false
%279:	icmp	%265 XXX 
%280:	br	%279 cond.false6 cond.end7 

BASIC BLOCK cond.false6
%281:	ptrtoint	%265 
%282:	and	%281 XXX 
%283:	or	%282 XXX 
%284:	inttoptr	%283 
%285:	br	cond.end7 

BASIC BLOCK cond.end7
%286:	phi	XXX %284 XXX 
%287:	call	XXX XXX XXX XXX llvm.dbg.value 
%288:	call	XXX XXX XXX XXX llvm.dbg.value 
%289:	icmp	%270 %274 
%290:	icmp	%274 %286 
%291:	or	%289 %290 
%292:	br	%291 while.body.preheader return 

BASIC BLOCK while.body.preheader
%293:	br	while.body 

BASIC BLOCK while.body
%294:	phi	%308 %274 
%295:	icmp	%294 addr 
%296:	getelementptr	%294 XXX 
%297:	icmp	%296 addr 
%298:	or	%295 %297 
%299:	br	%298 if.end18 while.cond31.preheader 

BASIC BLOCK while.cond31.preheader
%300:	phi	%294 
%301:	call	XXX XXX XXX XXX llvm.dbg.value 
%302:	icmp	%270 %300 
%303:	icmp	%300 %286 
%304:	or	%302 %303 
%305:	br	%304 while.body38.preheader return 

BASIC BLOCK while.body38.preheader
%306:	br	while.body38 

BASIC BLOCK if.end18
%307:	bitcast	%294 
%308:	load	%307 
%309:	call	XXX XXX XXX XXX llvm.dbg.value 
%310:	ptrtoint	%308 
%311:	and	%310 XXX 
%312:	icmp	%311 XXX 
%313:	icmp	%308 %294 
%314:	and	%313 %312 
%315:	br	%314 return.loopexit84 if.end26 

BASIC BLOCK if.end26
%316:	call	XXX XXX XXX XXX llvm.dbg.value 
%317:	store	%308 %265 
%318:	call	XXX XXX XXX XXX llvm.dbg.value 
%319:	icmp	%270 %308 
%320:	icmp	%308 %286 
%321:	or	%319 %320 
%322:	br	%321 while.body return.loopexit84 

BASIC BLOCK while.body38
%323:	phi	%325 %300 
%324:	bitcast	%323 
%325:	load	%324 
%326:	call	XXX XXX XXX XXX llvm.dbg.value 
%327:	icmp	%325 XXX 
%328:	br	%327 if.end42 return.loopexit 

BASIC BLOCK if.end42
%329:	ptrtoint	%325 
%330:	and	%329 XXX 
%331:	icmp	%330 XXX 
%332:	icmp	%325 %323 
%333:	and	%332 %331 
%334:	br	%333 return.loopexit if.end50 

BASIC BLOCK if.end50
%335:	call	XXX XXX XXX XXX llvm.dbg.value 
%336:	store	%325 %265 
%337:	call	XXX XXX XXX XXX llvm.dbg.value 
%338:	icmp	%270 %325 
%339:	icmp	%325 %286 
%340:	or	%338 %339 
%341:	br	%340 while.body38 return.loopexit 

BASIC BLOCK return.loopexit
%342:	phi	XXX XXX XXX 
%343:	br	return 

BASIC BLOCK return.loopexit84
%344:	br	return 

BASIC BLOCK return
%345:	phi	XXX XXX XXX XXX %342 XXX 
%346:	ret	%345 

FUNCTION _libsafe_warn

BASIC BLOCK entry
%347:	alloca	XXX 
%348:	alloca	XXX 
%349:	alloca	XXX 
%350:	alloca	XXX 
%351:	alloca	XXX 
%352:	call	XXX XXX XXX XXX llvm.dbg.value 
%353:	getelementptr	%350 XXX XXX 
%354:	call	XXX %353 llvm.lifetime.start 
%355:	call	XXX XXX XXX llvm.dbg.declare 
%356:	call	XXX XXX XXX llvm.dbg.declare 
%357:	store	XXX dying 
%358:	call	XXX XXX XXX XXX llvm.dbg.value 
%359:	call	XXX %353 XXX readlink 
%360:	trunc	%359 
%361:	call	XXX XXX XXX XXX llvm.dbg.value 
%362:	icmp	%360 XXX 
%363:	br	%362 if.else.i if.then.i 

BASIC BLOCK if.then.i
%364:	store	XXX %353 
%365:	br	get_exename.exit 

BASIC BLOCK if.else.i
%366:	shl	%359 XXX 
%367:	ashr	%366 XXX 
%368:	getelementptr	%350 XXX %367 
%369:	store	XXX %368 
%370:	br	get_exename.exit 

BASIC BLOCK get_exename.exit
%371:	getelementptr	%351 XXX XXX 
%372:	bitcast	%351 
%373:	call	%372 llvm.va_start 
%374:	call	XXX XXX XXX XXX llvm.dbg.value 
%375:	getelementptr	%348 XXX XXX 
%376:	call	XXX %375 llvm.lifetime.start 
%377:	call	XXX XXX XXX llvm.dbg.declare 
%378:	getelementptr	%349 XXX XXX 
%379:	call	XXX %378 llvm.lifetime.start 
%380:	call	XXX XXX XXX llvm.dbg.declare 
%381:	call	getpid 
%382:	call	%375 XXX XXX %381 snprintf 
%383:	call	%375 XXX fopen 
%384:	call	XXX XXX XXX XXX llvm.dbg.value 
%385:	icmp	%383 XXX 
%386:	br	%385 while.cond.i.preheader get_memory_maps.exit 

BASIC BLOCK while.cond.i.preheader
%387:	br	while.cond.i 

BASIC BLOCK while.cond.i
%388:	phi	%391 XXX 
%389:	call	%378 XXX %383 fgets 
%390:	icmp	%389 XXX 
%391:	add	%388 XXX 
%392:	call	XXX XXX XXX XXX llvm.dbg.value 
%393:	br	%390 while.cond.i while.end.i 

BASIC BLOCK while.end.i
%394:	phi	%388 
%395:	call	%383 fclose 
%396:	sext	%394 
%397:	mul	%396 XXX 
%398:	call	%397 malloc 
%399:	bitcast	%398 
%400:	call	XXX XXX XXX XXX llvm.dbg.value 
%401:	call	XXX XXX XXX XXX llvm.dbg.value 
%402:	call	XXX XXX XXX XXX llvm.dbg.value 
%403:	call	XXX XXX XXX XXX llvm.dbg.value 
%404:	call	XXX XXX XXX XXX llvm.dbg.value 
%405:	call	XXX XXX XXX XXX llvm.dbg.value 
%406:	call	XXX XXX XXX XXX llvm.dbg.value 
%407:	call	%375 XXX fopen 
%408:	call	XXX XXX XXX XXX llvm.dbg.value 
%409:	icmp	%407 XXX 
%410:	br	%409 while.cond17.preheader.i if.then12.i 

BASIC BLOCK while.cond17.preheader.i
%411:	call	%378 XXX %407 fgets 
%412:	icmp	%411 XXX 
%413:	icmp	%394 XXX 
%414:	and	%413 %412 
%415:	br	%414 while.end47.i while.body23.i.preheader 

BASIC BLOCK while.body23.i.preheader
%416:	br	while.body23.i 

BASIC BLOCK if.then12.i
%417:	icmp	%398 XXX 
%418:	br	%417 if.then14.i get_memory_maps.exit 

BASIC BLOCK if.then14.i
%419:	call	%398 free 
%420:	br	get_memory_maps.exit 

BASIC BLOCK while.body23.i
%421:	phi	%441 XXX 
%422:	getelementptr	%399 %421 XXX 
%423:	getelementptr	%399 %421 XXX 
%424:	call	%378 XXX %422 %423 __isoc99_sscanf 
%425:	call	%378 XXX strchr 
%426:	call	XXX XXX XXX XXX llvm.dbg.value 
%427:	icmp	%425 XXX 
%428:	br	%427 if.then31.i if.else.i43 

BASIC BLOCK if.then31.i
%429:	call	%425 __strdup 
%430:	getelementptr	%399 %421 XXX 
%431:	store	%429 %430 
%432:	call	%429 XXX strchr 
%433:	call	XXX XXX XXX XXX llvm.dbg.value 
%434:	icmp	%432 XXX 
%435:	br	%434 if.then40.i if.end45.i 

BASIC BLOCK if.then40.i
%436:	store	XXX %432 
%437:	br	if.end45.i 

BASIC BLOCK if.else.i43
%438:	getelementptr	%399 %421 XXX 
%439:	store	XXX %438 
%440:	br	if.end45.i 

BASIC BLOCK if.end45.i
%441:	add	%421 XXX 
%442:	call	%378 XXX %407 fgets 
%443:	icmp	%442 XXX 
%444:	icmp	%441 %396 
%445:	and	%444 %443 
%446:	br	%445 while.end47.i.loopexit while.body23.i 

BASIC BLOCK while.end47.i.loopexit
%447:	br	while.end47.i 

BASIC BLOCK while.end47.i
%448:	call	%407 fclose 
%449:	br	get_memory_maps.exit 

BASIC BLOCK get_memory_maps.exit
%450:	phi	%399 XXX %399 %399 
%451:	phi	%394 XXX XXX XXX 
%452:	call	XXX %378 llvm.lifetime.end 
%453:	call	XXX %375 llvm.lifetime.end 
%454:	call	XXX XXX XXX XXX llvm.dbg.value 
%455:	call	XXX XXX XXX openlog 
%456:	call	XXX XXX XXX syslog 
%457:	call	XXX XXX syslog 
%458:	call	XXX XXX %353 syslog 
%459:	call	getuid 
%460:	call	geteuid 
%461:	call	getpid 
%462:	call	XXX XXX %459 %460 %461 syslog 
%463:	load	stderr 
%464:	call	%463 XXX XXX fprintf 
%465:	load	stderr 
%466:	call	XXX XXX XXX %465 fwrite 
%467:	load	stderr 
%468:	call	%467 XXX %353 fprintf 
%469:	load	stderr 
%470:	call	getuid 
%471:	call	geteuid 
%472:	call	getpid 
%473:	call	%469 XXX %470 %471 %472 fprintf 
%474:	call	XXX XXX syslog 
%475:	load	stderr 
%476:	call	XXX XXX XXX %475 fwrite 
%477:	call	XXX llvm.frameaddress 
%478:	call	XXX XXX XXX XXX llvm.dbg.value 
%479:	load	%477 
%480:	icmp	%479 XXX 
%481:	br	%480 for.body.lr.ph for.end 

BASIC BLOCK for.body.lr.ph
%482:	icmp	%451 XXX 
%483:	sext	%451 
%484:	bitcast	%347 
%485:	icmp	%347 XXX 
%486:	icmp	%347 XXX 
%487:	ptrtoint	%347 
%488:	and	%487 XXX 
%489:	or	%488 XXX 
%490:	inttoptr	%489 
%491:	br	for.body 

BASIC BLOCK for.body
%492:	phi	%477 %532 
%493:	getelementptr	%492 XXX 
%494:	bitcast	%493 
%495:	load	%494 
%496:	call	XXX XXX XXX XXX llvm.dbg.value 
%497:	ptrtoint	%495 
%498:	add	%497 XXX 
%499:	and	%498 XXX 
%500:	inttoptr	%499 
%501:	call	XXX XXX XXX XXX llvm.dbg.value 
%502:	call	XXX XXX XXX XXX llvm.dbg.value 
%503:	call	XXX XXX XXX XXX llvm.dbg.value 
%504:	call	XXX XXX XXX XXX llvm.dbg.value 
%505:	call	XXX XXX XXX XXX llvm.dbg.value 
%506:	br	%482 find_caller_addr.exit for.body.i.preheader 

BASIC BLOCK for.body.i.preheader
%507:	br	for.body.i 

BASIC BLOCK for.body.i
%508:	phi	%517 XXX 
%509:	getelementptr	%450 %508 XXX 
%510:	load	%509 
%511:	icmp	%510 %500 
%512:	br	%511 land.lhs.true.i for.inc.i 

BASIC BLOCK land.lhs.true.i
%513:	getelementptr	%450 %508 XXX 
%514:	load	%513 
%515:	icmp	%514 %500 
%516:	br	%515 find_caller_addr.exit.loopexit for.inc.i 

BASIC BLOCK for.inc.i
%517:	add	%508 XXX 
%518:	icmp	%517 %483 
%519:	br	%518 find_caller_addr.exit.loopexit for.body.i 

BASIC BLOCK find_caller_addr.exit.loopexit
%520:	phi	%508 XXX 
%521:	br	find_caller_addr.exit 

BASIC BLOCK find_caller_addr.exit
%522:	phi	XXX %520 
%523:	shl	%522 XXX 
%524:	ashr	%523 XXX 
%525:	getelementptr	%450 %524 XXX 
%526:	load	%525 
%527:	call	XXX XXX %500 %526 syslog 
%528:	load	stderr 
%529:	load	%525 
%530:	call	%528 XXX %500 %529 fprintf 
%531:	bitcast	%492 
%532:	load	%531 
%533:	call	XXX XXX XXX XXX llvm.dbg.value 
%534:	call	XXX %484 llvm.lifetime.start 
%535:	call	XXX XXX XXX XXX llvm.dbg.value 
%536:	store	%492 %347 
%537:	call	XXX XXX XXX XXX llvm.dbg.value 
%538:	or	%485 %486 
%539:	select	%485 XXX XXX 
%540:	select	%538 %539 %490 
%541:	call	XXX XXX XXX XXX llvm.dbg.value 
%542:	icmp	%540 %532 
%543:	br	%542 if.end.i if.then.i53 

BASIC BLOCK if.then.i53
%544:	store	XXX _libsafe_exclude 
%545:	br	check_nextfp.exit.thread 

BASIC BLOCK if.end.i
%546:	ptrtoint	%532 
%547:	and	%546 XXX 
%548:	icmp	%547 XXX 
%549:	br	%548 if.then9.i if.end10.i 

BASIC BLOCK if.then9.i
%550:	store	XXX _libsafe_exclude 
%551:	br	check_nextfp.exit.thread 

BASIC BLOCK if.end10.i
%552:	call	XXX XXX XXX XXX llvm.dbg.value 
%553:	icmp	%492 %532 
%554:	br	%553 if.then13.i check_nextfp.exit.thread63 

BASIC BLOCK check_nextfp.exit.thread63
%555:	call	XXX %484 llvm.lifetime.end 
%556:	load	%532 
%557:	icmp	%556 XXX 
%558:	br	%557 for.body for.end.loopexit 

BASIC BLOCK if.then13.i
%559:	store	XXX _libsafe_exclude 
%560:	br	check_nextfp.exit.thread 

BASIC BLOCK check_nextfp.exit.thread
%561:	call	XXX %484 llvm.lifetime.end 
%562:	br	for.end 

BASIC BLOCK for.end.loopexit
%563:	br	for.end 

BASIC BLOCK for.end
%564:	call	XXX format %371 syslog 
%565:	load	stderr 
%566:	call	%565 format %371 vfprintf 
%567:	load	stderr 
%568:	call	XXX %567 fputc 
%569:	call	%372 llvm.va_end 
%570:	icmp	%450 XXX 
%571:	br	%570 if.then31 if.end32 

BASIC BLOCK if.then31
%572:	bitcast	%450 
%573:	call	%572 free 
%574:	br	if.end32 

BASIC BLOCK if.end32
%575:	store	XXX dying 
%576:	call	XXX %353 llvm.lifetime.end 
%577:	ret	

FUNCTION llvm.lifetime.start

FUNCTION llvm.va_start

FUNCTION openlog

FUNCTION syslog

FUNCTION getuid

FUNCTION geteuid

FUNCTION getpid

FUNCTION fprintf

FUNCTION llvm.va_end

FUNCTION free

FUNCTION llvm.lifetime.end

FUNCTION _libsafe_die

BASIC BLOCK entry
%578:	alloca	XXX 
%579:	call	XXX XXX XXX XXX llvm.dbg.value 
%580:	call	XXX XXX XXX llvm.dbg.declare 
%581:	store	XXX dying 
%582:	getelementptr	%578 XXX XXX 
%583:	bitcast	%578 
%584:	call	%583 llvm.va_start 
%585:	call	format %582 _libsafe_warn 
%586:	call	%583 llvm.va_end 
%587:	call	XXX raise 
%588:	ret	

FUNCTION raise

FUNCTION fopen

FUNCTION fgets

FUNCTION fclose

FUNCTION malloc

FUNCTION __isoc99_sscanf

FUNCTION strchr

FUNCTION __strdup

FUNCTION readlink

FUNCTION llvm.dbg.value

FUNCTION fwrite

FUNCTION fputc

FUNCTION strcpy

BASIC BLOCK entry
%589:	call	XXX XXX XXX XXX llvm.dbg.value 
%590:	call	XXX XXX XXX XXX llvm.dbg.value 
%591:	load	real_memcpy 
%592:	icmp	%591 XXX 
%593:	br	%592 if.end if.then 

BASIC BLOCK if.then
%594:	call	XXX XXX XXX XXX llvm.dbg.value 
%595:	call	XXX XXX dlsym 
%596:	call	XXX XXX XXX XXX llvm.dbg.value 
%597:	icmp	%595 XXX 
%598:	br	%597 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%599:	load	stderr 
%600:	call	dlerror 
%601:	call	%599 XXX XXX %600 fprintf 
%602:	call	XXX _exit 
%603:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%604:	store	%595 XXX 
%605:	br	if.end 

BASIC BLOCK if.end
%606:	load	strcpy.real_strcpy 
%607:	icmp	%606 XXX 
%608:	br	%607 if.end4 if.then2 

BASIC BLOCK if.then2
%609:	call	XXX XXX XXX XXX llvm.dbg.value 
%610:	call	XXX XXX dlsym 
%611:	call	XXX XXX XXX XXX llvm.dbg.value 
%612:	icmp	%610 XXX 
%613:	br	%612 getLibraryFunction.exit33 if.then.i32 

BASIC BLOCK if.then.i32
%614:	load	stderr 
%615:	call	dlerror 
%616:	call	%614 XXX XXX %615 fprintf 
%617:	call	XXX _exit 
%618:	unreachable	

BASIC BLOCK getLibraryFunction.exit33
%619:	store	%610 XXX 
%620:	bitcast	%610 
%621:	br	if.end4 

BASIC BLOCK if.end4
%622:	phi	%606 %620 
%623:	load	_libsafe_exclude 
%624:	icmp	%623 XXX 
%625:	br	%624 if.then6 if.end8 

BASIC BLOCK if.then6
%626:	call	dest src %622 
%627:	br	return 

BASIC BLOCK if.end8
%628:	call	dest _libsafe_stackVariableP 
%629:	zext	%628 
%630:	call	XXX XXX XXX XXX llvm.dbg.value 
%631:	icmp	%628 XXX 
%632:	br	%631 if.end13 if.then11 

BASIC BLOCK if.then11
%633:	load	strcpy.real_strcpy 
%634:	call	dest src %633 
%635:	br	return 

BASIC BLOCK if.end13
%636:	call	src %629 strnlen 
%637:	call	XXX XXX XXX XXX llvm.dbg.value 
%638:	icmp	%636 %629 
%639:	br	%638 if.end18 if.then17 

BASIC BLOCK if.then17
%640:	call	XXX _libsafe_die 
%641:	br	if.end18 

BASIC BLOCK if.end18
%642:	load	real_memcpy 
%643:	add	%636 XXX 
%644:	call	dest src %643 %642 
%645:	br	return 

BASIC BLOCK return
%646:	phi	%626 %634 dest 
%647:	ret	%646 

FUNCTION strnlen

FUNCTION strncpy

BASIC BLOCK entry
%648:	call	XXX XXX XXX XXX llvm.dbg.value 
%649:	call	XXX XXX XXX XXX llvm.dbg.value 
%650:	call	XXX XXX XXX XXX llvm.dbg.value 
%651:	load	strncpy.real_strncpy 
%652:	icmp	%651 XXX 
%653:	br	%652 if.end if.then 

BASIC BLOCK if.then
%654:	call	XXX XXX XXX XXX llvm.dbg.value 
%655:	call	XXX XXX dlsym 
%656:	call	XXX XXX XXX XXX llvm.dbg.value 
%657:	icmp	%655 XXX 
%658:	br	%657 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%659:	load	stderr 
%660:	call	dlerror 
%661:	call	%659 XXX XXX %660 fprintf 
%662:	call	XXX _exit 
%663:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%664:	store	%655 XXX 
%665:	bitcast	%655 
%666:	br	if.end 

BASIC BLOCK if.end
%667:	phi	%651 %665 
%668:	load	_libsafe_exclude 
%669:	icmp	%668 XXX 
%670:	br	%669 if.then2 if.end4 

BASIC BLOCK if.then2
%671:	call	dest src n %667 
%672:	br	return 

BASIC BLOCK if.end4
%673:	call	dest _libsafe_stackVariableP 
%674:	zext	%673 
%675:	call	XXX XXX XXX XXX llvm.dbg.value 
%676:	icmp	%673 XXX 
%677:	br	%676 if.end9 if.then7 

BASIC BLOCK if.then7
%678:	load	strncpy.real_strncpy 
%679:	call	dest src n %678 
%680:	br	return 

BASIC BLOCK if.end9
%681:	icmp	%674 n 
%682:	br	%681 if.end16 land.lhs.true 

BASIC BLOCK land.lhs.true
%683:	call	src %674 strnlen 
%684:	call	XXX XXX XXX XXX llvm.dbg.value 
%685:	icmp	%683 %674 
%686:	br	%685 if.end16 if.then15 

BASIC BLOCK if.then15
%687:	call	XXX _libsafe_die 
%688:	br	if.end16 

BASIC BLOCK if.end16
%689:	load	strncpy.real_strncpy 
%690:	call	dest src n %689 
%691:	br	return 

BASIC BLOCK return
%692:	phi	%671 %679 %690 
%693:	ret	%692 

FUNCTION stpcpy

BASIC BLOCK entry
%694:	call	XXX XXX XXX XXX llvm.dbg.value 
%695:	call	XXX XXX XXX XXX llvm.dbg.value 
%696:	load	real_memcpy 
%697:	icmp	%696 XXX 
%698:	br	%697 if.end if.then 

BASIC BLOCK if.then
%699:	call	XXX XXX XXX XXX llvm.dbg.value 
%700:	call	XXX XXX dlsym 
%701:	call	XXX XXX XXX XXX llvm.dbg.value 
%702:	icmp	%700 XXX 
%703:	br	%702 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%704:	load	stderr 
%705:	call	dlerror 
%706:	call	%704 XXX XXX %705 fprintf 
%707:	call	XXX _exit 
%708:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%709:	store	%700 XXX 
%710:	br	if.end 

BASIC BLOCK if.end
%711:	load	stpcpy.real_stpcpy 
%712:	icmp	%711 XXX 
%713:	br	%712 if.end4 if.then2 

BASIC BLOCK if.then2
%714:	call	XXX XXX XXX XXX llvm.dbg.value 
%715:	call	XXX XXX dlsym 
%716:	call	XXX XXX XXX XXX llvm.dbg.value 
%717:	icmp	%715 XXX 
%718:	br	%717 getLibraryFunction.exit34 if.then.i33 

BASIC BLOCK if.then.i33
%719:	load	stderr 
%720:	call	dlerror 
%721:	call	%719 XXX XXX %720 fprintf 
%722:	call	XXX _exit 
%723:	unreachable	

BASIC BLOCK getLibraryFunction.exit34
%724:	store	%715 XXX 
%725:	bitcast	%715 
%726:	br	if.end4 

BASIC BLOCK if.end4
%727:	phi	%711 %725 
%728:	load	_libsafe_exclude 
%729:	icmp	%728 XXX 
%730:	br	%729 if.then6 if.end8 

BASIC BLOCK if.then6
%731:	call	dest src %727 
%732:	br	return 

BASIC BLOCK if.end8
%733:	call	dest _libsafe_stackVariableP 
%734:	zext	%733 
%735:	call	XXX XXX XXX XXX llvm.dbg.value 
%736:	icmp	%733 XXX 
%737:	br	%736 if.end13 if.then11 

BASIC BLOCK if.then11
%738:	load	stpcpy.real_stpcpy 
%739:	call	dest src %738 
%740:	br	return 

BASIC BLOCK if.end13
%741:	call	src %734 strnlen 
%742:	call	XXX XXX XXX XXX llvm.dbg.value 
%743:	icmp	%741 %734 
%744:	br	%743 if.end18 if.then17 

BASIC BLOCK if.then17
%745:	call	XXX _libsafe_die 
%746:	br	if.end18 

BASIC BLOCK if.end18
%747:	load	real_memcpy 
%748:	add	%741 XXX 
%749:	call	dest src %748 %747 
%750:	getelementptr	dest %741 
%751:	br	return 

BASIC BLOCK return
%752:	phi	%731 %739 %750 
%753:	ret	%752 

FUNCTION wcscpy

BASIC BLOCK entry
%754:	call	XXX XXX XXX XXX llvm.dbg.value 
%755:	call	XXX XXX XXX XXX llvm.dbg.value 
%756:	load	wcscpy.real_wcscpy 
%757:	icmp	%756 XXX 
%758:	br	%757 if.end if.then 

BASIC BLOCK if.then
%759:	call	XXX XXX XXX XXX llvm.dbg.value 
%760:	call	XXX XXX dlsym 
%761:	call	XXX XXX XXX XXX llvm.dbg.value 
%762:	icmp	%760 XXX 
%763:	br	%762 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%764:	load	stderr 
%765:	call	dlerror 
%766:	call	%764 XXX XXX %765 fprintf 
%767:	call	XXX _exit 
%768:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%769:	store	%760 XXX 
%770:	bitcast	%760 
%771:	br	if.end 

BASIC BLOCK if.end
%772:	phi	%756 %770 
%773:	load	_libsafe_exclude 
%774:	icmp	%773 XXX 
%775:	br	%774 if.then2 if.end4 

BASIC BLOCK if.then2
%776:	call	dest src %772 
%777:	br	return 

BASIC BLOCK if.end4
%778:	bitcast	dest 
%779:	call	%778 _libsafe_stackVariableP 
%780:	icmp	%779 XXX 
%781:	br	%780 if.end9 if.then7 

BASIC BLOCK if.then7
%782:	load	wcscpy.real_wcscpy 
%783:	call	dest src %782 
%784:	br	return 

BASIC BLOCK if.end9
%785:	lshr	%779 XXX 
%786:	zext	%785 
%787:	call	XXX XXX XXX XXX llvm.dbg.value 
%788:	call	src %786 wcsnlen 
%789:	call	XXX XXX XXX XXX llvm.dbg.value 
%790:	icmp	%788 %786 
%791:	br	%790 if.end14 if.then13 

BASIC BLOCK if.then13
%792:	call	XXX _libsafe_die 
%793:	br	if.end14 

BASIC BLOCK if.end14
%794:	load	wcscpy.real_wcscpy 
%795:	call	dest src %794 
%796:	br	return 

BASIC BLOCK return
%797:	phi	%776 %783 %795 
%798:	ret	%797 

FUNCTION wcsnlen

FUNCTION wcpcpy

BASIC BLOCK entry
%799:	call	XXX XXX XXX XXX llvm.dbg.value 
%800:	call	XXX XXX XXX XXX llvm.dbg.value 
%801:	load	wcpcpy.real_wcpcpy 
%802:	icmp	%801 XXX 
%803:	br	%802 if.end if.then 

BASIC BLOCK if.then
%804:	call	XXX XXX XXX XXX llvm.dbg.value 
%805:	call	XXX XXX dlsym 
%806:	call	XXX XXX XXX XXX llvm.dbg.value 
%807:	icmp	%805 XXX 
%808:	br	%807 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%809:	load	stderr 
%810:	call	dlerror 
%811:	call	%809 XXX XXX %810 fprintf 
%812:	call	XXX _exit 
%813:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%814:	store	%805 XXX 
%815:	bitcast	%805 
%816:	br	if.end 

BASIC BLOCK if.end
%817:	phi	%801 %815 
%818:	load	_libsafe_exclude 
%819:	icmp	%818 XXX 
%820:	br	%819 if.then2 if.end4 

BASIC BLOCK if.then2
%821:	call	dest src %817 
%822:	br	return 

BASIC BLOCK if.end4
%823:	bitcast	dest 
%824:	call	%823 _libsafe_stackVariableP 
%825:	icmp	%824 XXX 
%826:	br	%825 if.end9 if.then7 

BASIC BLOCK if.then7
%827:	load	wcpcpy.real_wcpcpy 
%828:	call	dest src %827 
%829:	br	return 

BASIC BLOCK if.end9
%830:	lshr	%824 XXX 
%831:	zext	%830 
%832:	call	XXX XXX XXX XXX llvm.dbg.value 
%833:	call	src %831 wcsnlen 
%834:	call	XXX XXX XXX XXX llvm.dbg.value 
%835:	icmp	%833 %831 
%836:	br	%835 if.end14 if.then13 

BASIC BLOCK if.then13
%837:	call	XXX _libsafe_die 
%838:	br	if.end14 

BASIC BLOCK if.end14
%839:	load	wcpcpy.real_wcpcpy 
%840:	call	dest src %839 
%841:	br	return 

BASIC BLOCK return
%842:	phi	%821 %828 %840 
%843:	ret	%842 

FUNCTION memcpy

BASIC BLOCK entry
%844:	call	XXX XXX XXX XXX llvm.dbg.value 
%845:	call	XXX XXX XXX XXX llvm.dbg.value 
%846:	call	XXX XXX XXX XXX llvm.dbg.value 
%847:	load	real_memcpy 
%848:	icmp	%847 XXX 
%849:	br	%848 if.end if.then 

BASIC BLOCK if.then
%850:	call	XXX XXX XXX XXX llvm.dbg.value 
%851:	call	XXX XXX dlsym 
%852:	call	XXX XXX XXX XXX llvm.dbg.value 
%853:	icmp	%851 XXX 
%854:	br	%853 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%855:	load	stderr 
%856:	call	dlerror 
%857:	call	%855 XXX XXX %856 fprintf 
%858:	call	XXX _exit 
%859:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%860:	store	%851 XXX 
%861:	bitcast	%851 
%862:	br	if.end 

BASIC BLOCK if.end
%863:	phi	%847 %861 
%864:	load	_libsafe_exclude 
%865:	icmp	%864 XXX 
%866:	br	%865 if.then2 if.end4 

BASIC BLOCK if.then2
%867:	call	dest src n %863 
%868:	br	return 

BASIC BLOCK if.end4
%869:	call	dest _libsafe_stackVariableP 
%870:	call	XXX XXX XXX XXX llvm.dbg.value 
%871:	icmp	%869 XXX 
%872:	br	%871 if.end9 if.then7 

BASIC BLOCK if.then7
%873:	load	real_memcpy 
%874:	call	dest src n %873 
%875:	br	return 

BASIC BLOCK if.end9
%876:	zext	%869 
%877:	icmp	%876 n 
%878:	br	%877 if.end13 if.then12 

BASIC BLOCK if.then12
%879:	call	XXX _libsafe_die 
%880:	br	if.end13 

BASIC BLOCK if.end13
%881:	load	real_memcpy 
%882:	call	dest src n %881 
%883:	br	return 

BASIC BLOCK return
%884:	phi	%867 %874 %882 
%885:	ret	%884 

FUNCTION strcat

BASIC BLOCK entry
%886:	call	XXX XXX XXX XXX llvm.dbg.value 
%887:	call	XXX XXX XXX XXX llvm.dbg.value 
%888:	load	real_memcpy 
%889:	icmp	%888 XXX 
%890:	br	%889 if.end if.then 

BASIC BLOCK if.then
%891:	call	XXX XXX XXX XXX llvm.dbg.value 
%892:	call	XXX XXX dlsym 
%893:	call	XXX XXX XXX XXX llvm.dbg.value 
%894:	icmp	%892 XXX 
%895:	br	%894 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%896:	load	stderr 
%897:	call	dlerror 
%898:	call	%896 XXX XXX %897 fprintf 
%899:	call	XXX _exit 
%900:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%901:	store	%892 XXX 
%902:	br	if.end 

BASIC BLOCK if.end
%903:	load	strcat.real_strcat 
%904:	icmp	%903 XXX 
%905:	br	%904 if.end4 if.then2 

BASIC BLOCK if.then2
%906:	call	XXX XXX XXX XXX llvm.dbg.value 
%907:	call	XXX XXX dlsym 
%908:	call	XXX XXX XXX XXX llvm.dbg.value 
%909:	icmp	%907 XXX 
%910:	br	%909 getLibraryFunction.exit43 if.then.i42 

BASIC BLOCK if.then.i42
%911:	load	stderr 
%912:	call	dlerror 
%913:	call	%911 XXX XXX %912 fprintf 
%914:	call	XXX _exit 
%915:	unreachable	

BASIC BLOCK getLibraryFunction.exit43
%916:	store	%907 XXX 
%917:	bitcast	%907 
%918:	br	if.end4 

BASIC BLOCK if.end4
%919:	phi	%903 %917 
%920:	load	_libsafe_exclude 
%921:	icmp	%920 XXX 
%922:	br	%921 if.then6 if.end8 

BASIC BLOCK if.then6
%923:	call	dest src %919 
%924:	br	return 

BASIC BLOCK if.end8
%925:	call	dest _libsafe_stackVariableP 
%926:	zext	%925 
%927:	call	XXX XXX XXX XXX llvm.dbg.value 
%928:	icmp	%925 XXX 
%929:	br	%928 if.end13 if.then11 

BASIC BLOCK if.then11
%930:	load	strcat.real_strcat 
%931:	call	dest src %930 
%932:	br	return 

BASIC BLOCK if.end13
%933:	call	dest %926 strnlen 
%934:	call	src %926 strnlen 
%935:	add	%934 %933 
%936:	and	%935 XXX 
%937:	icmp	%936 %926 
%938:	br	%937 if.then21 if.end22 

BASIC BLOCK if.then21
%939:	call	XXX _libsafe_die 
%940:	br	if.end22 

BASIC BLOCK if.end22
%941:	load	real_memcpy 
%942:	and	%933 XXX 
%943:	getelementptr	dest %942 
%944:	add	%934 XXX 
%945:	and	%944 XXX 
%946:	call	%943 src %945 %941 
%947:	br	return 

BASIC BLOCK return
%948:	phi	%923 %931 dest 
%949:	ret	%948 

FUNCTION strncat

BASIC BLOCK entry
%950:	call	XXX XXX XXX XXX llvm.dbg.value 
%951:	call	XXX XXX XXX XXX llvm.dbg.value 
%952:	call	XXX XXX XXX XXX llvm.dbg.value 
%953:	load	strncat.real_strncat 
%954:	icmp	%953 XXX 
%955:	br	%954 if.end if.then 

BASIC BLOCK if.then
%956:	call	XXX XXX XXX XXX llvm.dbg.value 
%957:	call	XXX XXX dlsym 
%958:	call	XXX XXX XXX XXX llvm.dbg.value 
%959:	icmp	%957 XXX 
%960:	br	%959 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%961:	load	stderr 
%962:	call	dlerror 
%963:	call	%961 XXX XXX %962 fprintf 
%964:	call	XXX _exit 
%965:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%966:	store	%957 XXX 
%967:	bitcast	%957 
%968:	br	if.end 

BASIC BLOCK if.end
%969:	phi	%953 %967 
%970:	load	_libsafe_exclude 
%971:	icmp	%970 XXX 
%972:	br	%971 if.then2 if.end4 

BASIC BLOCK if.then2
%973:	call	dest src n %969 
%974:	br	return 

BASIC BLOCK if.end4
%975:	call	dest _libsafe_stackVariableP 
%976:	zext	%975 
%977:	call	XXX XXX XXX XXX llvm.dbg.value 
%978:	icmp	%975 XXX 
%979:	br	%978 if.end9 if.then7 

BASIC BLOCK if.then7
%980:	load	strncat.real_strncat 
%981:	call	dest src n %980 
%982:	br	return 

BASIC BLOCK if.end9
%983:	call	dest %976 strnlen 
%984:	and	%983 XXX 
%985:	add	%984 n 
%986:	icmp	%985 %976 
%987:	br	%986 if.end22 land.lhs.true 

BASIC BLOCK land.lhs.true
%988:	call	src %976 strnlen 
%989:	add	%988 %983 
%990:	and	%989 XXX 
%991:	icmp	%990 %976 
%992:	br	%991 if.then21 if.end22 

BASIC BLOCK if.then21
%993:	call	XXX _libsafe_die 
%994:	br	if.end22 

BASIC BLOCK if.end22
%995:	load	strncat.real_strncat 
%996:	call	dest src n %995 
%997:	br	return 

BASIC BLOCK return
%998:	phi	%973 %981 %996 
%999:	ret	%998 

FUNCTION wcscat

BASIC BLOCK entry
%1000:	call	XXX XXX XXX XXX llvm.dbg.value 
%1001:	call	XXX XXX XXX XXX llvm.dbg.value 
%1002:	load	real_memcpy 
%1003:	icmp	%1002 XXX 
%1004:	br	%1003 if.end if.then 

BASIC BLOCK if.then
%1005:	call	XXX XXX XXX XXX llvm.dbg.value 
%1006:	call	XXX XXX dlsym 
%1007:	call	XXX XXX XXX XXX llvm.dbg.value 
%1008:	icmp	%1006 XXX 
%1009:	br	%1008 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1010:	load	stderr 
%1011:	call	dlerror 
%1012:	call	%1010 XXX XXX %1011 fprintf 
%1013:	call	XXX _exit 
%1014:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1015:	store	%1006 XXX 
%1016:	br	if.end 

BASIC BLOCK if.end
%1017:	load	wcscat.real_wcscat 
%1018:	icmp	%1017 XXX 
%1019:	br	%1018 if.end4 if.then2 

BASIC BLOCK if.then2
%1020:	call	XXX XXX XXX XXX llvm.dbg.value 
%1021:	call	XXX XXX dlsym 
%1022:	call	XXX XXX XXX XXX llvm.dbg.value 
%1023:	icmp	%1021 XXX 
%1024:	br	%1023 getLibraryFunction.exit47 if.then.i46 

BASIC BLOCK if.then.i46
%1025:	load	stderr 
%1026:	call	dlerror 
%1027:	call	%1025 XXX XXX %1026 fprintf 
%1028:	call	XXX _exit 
%1029:	unreachable	

BASIC BLOCK getLibraryFunction.exit47
%1030:	store	%1021 XXX 
%1031:	bitcast	%1021 
%1032:	br	if.end4 

BASIC BLOCK if.end4
%1033:	phi	%1017 %1031 
%1034:	load	_libsafe_exclude 
%1035:	icmp	%1034 XXX 
%1036:	br	%1035 if.then6 if.end8 

BASIC BLOCK if.then6
%1037:	call	dest src %1033 
%1038:	br	return 

BASIC BLOCK if.end8
%1039:	bitcast	dest 
%1040:	call	%1039 _libsafe_stackVariableP 
%1041:	icmp	%1040 XXX 
%1042:	br	%1041 if.end13 if.then11 

BASIC BLOCK if.then11
%1043:	load	wcscat.real_wcscat 
%1044:	call	dest src %1043 
%1045:	br	return 

BASIC BLOCK if.end13
%1046:	lshr	%1040 XXX 
%1047:	zext	%1046 
%1048:	call	dest %1047 wcsnlen 
%1049:	call	src %1047 wcsnlen 
%1050:	add	%1048 XXX 
%1051:	add	%1050 %1049 
%1052:	and	%1051 XXX 
%1053:	icmp	%1052 %1047 
%1054:	br	%1053 if.then24 if.end25 

BASIC BLOCK if.then24
%1055:	call	XXX _libsafe_die 
%1056:	br	if.end25 

BASIC BLOCK if.end25
%1057:	load	real_memcpy 
%1058:	and	%1048 XXX 
%1059:	getelementptr	dest %1058 
%1060:	bitcast	%1059 
%1061:	bitcast	src 
%1062:	add	%1049 XXX 
%1063:	and	%1062 XXX 
%1064:	call	%1060 %1061 %1063 %1057 
%1065:	br	return 

BASIC BLOCK return
%1066:	phi	%1037 %1044 dest 
%1067:	ret	%1066 

FUNCTION vfprintf

BASIC BLOCK entry
%1068:	call	XXX XXX XXX XXX llvm.dbg.value 
%1069:	call	XXX XXX XXX XXX llvm.dbg.value 
%1070:	call	XXX XXX XXX XXX llvm.dbg.value 
%1071:	call	XXX XXX XXX XXX llvm.dbg.value 
%1072:	load	vfprintf.real_vfprintf 
%1073:	icmp	%1072 XXX 
%1074:	br	%1073 if.end if.then 

BASIC BLOCK if.then
%1075:	call	XXX XXX XXX XXX llvm.dbg.value 
%1076:	call	XXX XXX dlsym 
%1077:	call	XXX XXX XXX XXX llvm.dbg.value 
%1078:	icmp	%1076 XXX 
%1079:	br	%1078 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1080:	load	stderr 
%1081:	call	dlerror 
%1082:	call	%1080 XXX XXX %1081 fprintf 
%1083:	call	XXX _exit 
%1084:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1085:	store	%1076 XXX 
%1086:	bitcast	%1076 
%1087:	br	if.end 

BASIC BLOCK if.end
%1088:	phi	%1072 %1086 
%1089:	load	_libsafe_exclude 
%1090:	icmp	%1089 XXX 
%1091:	br	%1090 if.then2 for.cond.preheader 

BASIC BLOCK for.cond.preheader
%1092:	br	for.cond 

BASIC BLOCK if.then2
%1093:	call	fp format ap %1088 
%1094:	call	XXX XXX XXX XXX llvm.dbg.value 
%1095:	br	return 

BASIC BLOCK for.cond
%1096:	phi	%1330 format 
%1097:	phi	%1329 XXX 
%1098:	load	%1096 
%1099:	switch	%1098 for.inc248 XXX for.end250.loopexit414 XXX for.cond8.preheader 

BASIC BLOCK for.cond8.preheader
%1100:	getelementptr	%1096 XXX 
%1101:	load	%1100 
%1102:	icmp	%1101 XXX 
%1103:	br	%1102 land.rhs.lr.ph for.end250.loopexit414 

BASIC BLOCK land.rhs.lr.ph
%1104:	call	__ctype_b_loc 
%1105:	load	%1104 
%1106:	br	land.rhs 

BASIC BLOCK land.rhs
%1107:	phi	%1101 %1122 
%1108:	phi	%1096 %1109 
%1109:	phi	%1100 %1121 
%1110:	phi	XXX XXX 
%1111:	phi	XXX %1119 
%1112:	sext	%1107 
%1113:	getelementptr	%1105 %1112 
%1114:	load	%1113 
%1115:	and	%1114 XXX 
%1116:	icmp	%1115 XXX 
%1117:	br	%1116 for.body15 if.end25 

BASIC BLOCK for.body15
%1118:	call	XXX XXX XXX XXX llvm.dbg.value 
%1119:	select	%1110 %1109 %1111 
%1120:	call	XXX XXX XXX XXX llvm.dbg.value 
%1121:	getelementptr	%1108 XXX 
%1122:	load	%1121 
%1123:	icmp	%1122 XXX 
%1124:	br	%1123 land.rhs for.end250.loopexit413 

BASIC BLOCK if.end25
%1125:	phi	%1111 
%1126:	phi	%1110 
%1127:	phi	%1109 
%1128:	phi	%1108 
%1129:	phi	%1107 
%1130:	br	%1126 if.then27 land.rhs39.preheader 

BASIC BLOCK land.rhs39.preheader
%1131:	phi	%1136 %1129 
%1132:	phi	%1134 %1127 
%1133:	br	land.rhs39 

BASIC BLOCK for.cond36.preheader
%1134:	getelementptr	%1128 XXX 
%1135:	call	XXX XXX XXX XXX llvm.dbg.value 
%1136:	load	%1134 
%1137:	icmp	%1136 XXX 
%1138:	br	%1137 land.rhs39.preheader for.end250.loopexit414 

BASIC BLOCK if.then27
%1139:	icmp	%1129 XXX 
%1140:	br	%1139 if.else for.cond36.preheader 

BASIC BLOCK if.else
%1141:	add	%1097 XXX 
%1142:	call	XXX XXX XXX XXX llvm.dbg.value 
%1143:	call	XXX XXX XXX XXX llvm.dbg.value 
%1144:	br	for.inc248 

BASIC BLOCK land.rhs39
%1145:	phi	%1154 %1131 
%1146:	phi	%1152 %1132 
%1147:	sext	%1145 
%1148:	getelementptr	is_printf_flag XXX %1147 
%1149:	load	%1148 
%1150:	icmp	%1149 XXX 
%1151:	br	%1150 for.inc47 for.end49 

BASIC BLOCK for.inc47
%1152:	getelementptr	%1146 XXX 
%1153:	call	XXX XXX XXX XXX llvm.dbg.value 
%1154:	load	%1152 
%1155:	icmp	%1154 XXX 
%1156:	br	%1155 land.rhs39 for.end250.loopexit412 

BASIC BLOCK for.end49
%1157:	phi	%1146 
%1158:	phi	%1145 
%1159:	icmp	%1158 XXX 
%1160:	br	%1159 land.rhs99.preheader for.cond60.preheader 

BASIC BLOCK land.rhs99.preheader
%1161:	br	land.rhs99 

BASIC BLOCK for.cond60.preheader
%1162:	br	for.cond60 

BASIC BLOCK for.cond60
%1163:	phi	%1165 %1157 
%1164:	phi	XXX XXX 
%1165:	getelementptr	%1163 XXX 
%1166:	load	%1165 
%1167:	icmp	%1166 XXX 
%1168:	br	%1167 land.rhs63 for.end250.loopexit410 

BASIC BLOCK land.rhs63
%1169:	sext	%1166 
%1170:	getelementptr	%1105 %1169 
%1171:	load	%1170 
%1172:	and	%1171 XXX 
%1173:	icmp	%1172 XXX 
%1174:	br	%1173 for.cond60 if.end80 

BASIC BLOCK if.end80
%1175:	phi	%1166 
%1176:	phi	%1165 
%1177:	phi	%1164 
%1178:	phi	%1163 
%1179:	icmp	%1177 XXX 
%1180:	br	%1179 if.then82 if.else92 

BASIC BLOCK if.then82
%1181:	icmp	%1175 XXX 
%1182:	br	%1181 if.else88 if.then86 

BASIC BLOCK if.then86
%1183:	getelementptr	%1178 XXX 
%1184:	call	XXX XXX XXX XXX llvm.dbg.value 
%1185:	br	if.end117 

BASIC BLOCK if.else88
%1186:	add	%1097 XXX 
%1187:	call	XXX XXX XXX XXX llvm.dbg.value 
%1188:	call	XXX XXX XXX XXX llvm.dbg.value 
%1189:	br	for.inc248 

BASIC BLOCK if.else92
%1190:	add	%1097 XXX 
%1191:	call	XXX XXX XXX XXX llvm.dbg.value 
%1192:	br	if.end117 

BASIC BLOCK land.rhs99
%1193:	phi	%1203 %1158 
%1194:	phi	%1201 %1157 
%1195:	sext	%1193 
%1196:	getelementptr	%1105 %1195 
%1197:	load	%1196 
%1198:	and	%1197 XXX 
%1199:	icmp	%1198 XXX 
%1200:	br	%1199 for.inc109 if.end117.loopexit 

BASIC BLOCK for.inc109
%1201:	getelementptr	%1194 XXX 
%1202:	call	XXX XXX XXX XXX llvm.dbg.value 
%1203:	load	%1201 
%1204:	icmp	%1203 XXX 
%1205:	br	%1204 land.rhs99 for.end250.loopexit411 

BASIC BLOCK if.end117.loopexit
%1206:	phi	%1194 
%1207:	br	if.end117 

BASIC BLOCK if.end117
%1208:	phi	%1183 %1176 %1206 
%1209:	phi	%1097 %1190 %1097 
%1210:	load	%1208 
%1211:	icmp	%1210 XXX 
%1212:	br	%1211 if.end186 if.then121 

BASIC BLOCK if.then121
%1213:	getelementptr	%1208 XXX 
%1214:	call	XXX XXX XXX XXX llvm.dbg.value 
%1215:	load	%1213 
%1216:	switch	%1215 land.rhs167.preheader XXX if.then126 XXX for.end250.loopexit414 

BASIC BLOCK land.rhs167.preheader
%1217:	br	land.rhs167 

BASIC BLOCK if.then126
%1218:	getelementptr	%1208 XXX 
%1219:	call	XXX XXX XXX XXX llvm.dbg.value 
%1220:	call	XXX XXX XXX XXX llvm.dbg.value 
%1221:	load	%1218 
%1222:	icmp	%1221 XXX 
%1223:	br	%1222 land.rhs131.preheader for.end250.loopexit414 

BASIC BLOCK land.rhs131.preheader
%1224:	br	land.rhs131 

BASIC BLOCK land.rhs131
%1225:	phi	%1237 %1221 
%1226:	phi	XXX XXX 
%1227:	phi	%1235 %1218 
%1228:	sext	%1225 
%1229:	getelementptr	%1105 %1228 
%1230:	load	%1229 
%1231:	and	%1230 XXX 
%1232:	icmp	%1231 XXX 
%1233:	br	%1232 for.body140 if.end148 

BASIC BLOCK for.body140
%1234:	call	XXX XXX XXX XXX llvm.dbg.value 
%1235:	getelementptr	%1227 XXX 
%1236:	call	XXX XXX XXX XXX llvm.dbg.value 
%1237:	load	%1235 
%1238:	icmp	%1237 XXX 
%1239:	br	%1238 land.rhs131 for.end250.loopexit409 

BASIC BLOCK if.end148
%1240:	phi	%1227 
%1241:	phi	%1226 
%1242:	phi	%1225 
%1243:	icmp	%1241 XXX 
%1244:	br	%1243 if.then150 if.else160 

BASIC BLOCK if.then150
%1245:	icmp	%1242 XXX 
%1246:	br	%1245 if.else156 if.then154 

BASIC BLOCK if.then154
%1247:	getelementptr	%1240 XXX 
%1248:	call	XXX XXX XXX XXX llvm.dbg.value 
%1249:	load	%1247 
%1250:	br	if.end186 

BASIC BLOCK if.else156
%1251:	add	%1209 XXX 
%1252:	call	XXX XXX XXX XXX llvm.dbg.value 
%1253:	getelementptr	%1240 XXX 
%1254:	call	XXX XXX XXX XXX llvm.dbg.value 
%1255:	br	for.inc248 

BASIC BLOCK if.else160
%1256:	add	%1209 XXX 
%1257:	call	XXX XXX XXX XXX llvm.dbg.value 
%1258:	br	if.end186 

BASIC BLOCK for.cond164
%1259:	load	%1270 
%1260:	icmp	%1259 XXX 
%1261:	br	%1260 land.rhs167 for.end250.loopexit 

BASIC BLOCK land.rhs167
%1262:	phi	%1259 %1215 
%1263:	phi	%1270 %1213 
%1264:	phi	%1263 %1208 
%1265:	sext	%1262 
%1266:	getelementptr	%1105 %1265 
%1267:	load	%1266 
%1268:	and	%1267 XXX 
%1269:	icmp	%1268 XXX 
%1270:	getelementptr	%1264 XXX 
%1271:	call	XXX XXX XXX XXX llvm.dbg.value 
%1272:	br	%1269 for.cond164 for.end179 

BASIC BLOCK for.end179
%1273:	phi	%1263 
%1274:	phi	%1262 
%1275:	icmp	%1274 XXX 
%1276:	br	%1275 if.end186 for.end250.loopexit414 

BASIC BLOCK if.end186
%1277:	phi	%1249 %1242 %1274 %1210 
%1278:	phi	%1247 %1240 %1273 %1208 
%1279:	phi	%1209 %1256 %1209 %1209 
%1280:	sext	%1277 
%1281:	getelementptr	is_printf_lengthmod XXX %1280 
%1282:	load	%1281 
%1283:	icmp	%1282 XXX 
%1284:	br	%1283 if.then191 if.end220 

BASIC BLOCK if.then191
%1285:	getelementptr	%1278 XXX 
%1286:	call	XXX XXX XXX XXX llvm.dbg.value 
%1287:	load	%1285 
%1288:	switch	%1287 if.end214 XXX for.end250.loopexit414 XXX land.lhs.true XXX land.lhs.true207 

BASIC BLOCK land.lhs.true
%1289:	icmp	%1277 XXX 
%1290:	br	%1289 if.end220 if.then212 

BASIC BLOCK land.lhs.true207
%1291:	icmp	%1277 XXX 
%1292:	br	%1291 if.end220 if.then212 

BASIC BLOCK if.then212
%1293:	getelementptr	%1278 XXX 
%1294:	call	XXX XXX XXX XXX llvm.dbg.value 
%1295:	load	%1293 
%1296:	br	if.end214 

BASIC BLOCK if.end214
%1297:	phi	%1295 %1287 
%1298:	phi	%1293 %1285 
%1299:	icmp	%1297 XXX 
%1300:	br	%1299 if.end220 for.end250.loopexit414 

BASIC BLOCK if.end220
%1301:	phi	%1297 %1277 XXX XXX 
%1302:	phi	%1298 %1278 %1285 %1285 
%1303:	sext	%1301 
%1304:	getelementptr	is_printf_convspec XXX %1303 
%1305:	load	%1304 
%1306:	icmp	%1305 XXX 
%1307:	br	%1306 if.then225 for.inc248 

BASIC BLOCK if.then225
%1308:	add	%1279 XXX 
%1309:	call	XXX XXX XXX XXX llvm.dbg.value 
%1310:	icmp	%1125 XXX 
%1311:	br	%1310 if.then228 if.end236 

BASIC BLOCK if.then228
%1312:	call	%1125 atoi 
%1313:	add	%1312 XXX 
%1314:	br	if.end236 

BASIC BLOCK if.end236
%1315:	phi	%1313 %1308 
%1316:	icmp	%1301 XXX 
%1317:	br	%1316 for.inc248 if.then240 

BASIC BLOCK if.then240
%1318:	sext	%1315 
%1319:	shl	%1318 XXX 
%1320:	getelementptr	ap %1319 
%1321:	bitcast	%1320 
%1322:	load	%1321 
%1323:	call	%1322 _libsafe_raVariableP 
%1324:	icmp	%1323 XXX 
%1325:	br	%1324 if.then243 for.inc248 

BASIC BLOCK if.then243
%1326:	call	XXX _libsafe_die 
%1327:	br	for.inc248 

BASIC BLOCK for.inc248
%1328:	phi	%1302 %1302 %1302 %1302 %1253 %1178 %1128 %1096 
%1329:	phi	%1308 %1308 %1308 %1279 %1251 %1186 %1141 %1097 
%1330:	getelementptr	%1328 XXX 
%1331:	call	XXX XXX XXX XXX llvm.dbg.value 
%1332:	br	for.cond 

BASIC BLOCK for.end250.loopexit
%1333:	br	for.end250 

BASIC BLOCK for.end250.loopexit409
%1334:	br	for.end250 

BASIC BLOCK for.end250.loopexit410
%1335:	br	for.end250 

BASIC BLOCK for.end250.loopexit411
%1336:	br	for.end250 

BASIC BLOCK for.end250.loopexit412
%1337:	br	for.end250 

BASIC BLOCK for.end250.loopexit413
%1338:	br	for.end250 

BASIC BLOCK for.end250.loopexit414
%1339:	br	for.end250 

BASIC BLOCK for.end250
%1340:	load	vfprintf.real_vfprintf 
%1341:	call	fp format ap %1340 
%1342:	call	XXX XXX XXX XXX llvm.dbg.value 
%1343:	br	return 

BASIC BLOCK return
%1344:	phi	%1093 %1341 
%1345:	ret	%1344 

FUNCTION __ctype_b_loc

FUNCTION atoi

FUNCTION _IO_vfprintf

BASIC BLOCK entry
%1346:	call	XXX XXX XXX XXX llvm.dbg.value 
%1347:	call	XXX XXX XXX XXX llvm.dbg.value 
%1348:	call	XXX XXX XXX XXX llvm.dbg.value 
%1349:	call	XXX XXX XXX XXX llvm.dbg.value 
%1350:	load	_IO_vfprintf.real_vfprintf 
%1351:	icmp	%1350 XXX 
%1352:	br	%1351 if.end if.then 

BASIC BLOCK if.then
%1353:	call	XXX XXX XXX XXX llvm.dbg.value 
%1354:	call	XXX XXX dlsym 
%1355:	call	XXX XXX XXX XXX llvm.dbg.value 
%1356:	icmp	%1354 XXX 
%1357:	br	%1356 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1358:	load	stderr 
%1359:	call	dlerror 
%1360:	call	%1358 XXX XXX %1359 fprintf 
%1361:	call	XXX _exit 
%1362:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1363:	store	%1354 XXX 
%1364:	bitcast	%1354 
%1365:	br	if.end 

BASIC BLOCK if.end
%1366:	phi	%1350 %1364 
%1367:	load	_libsafe_exclude 
%1368:	icmp	%1367 XXX 
%1369:	br	%1368 if.then2 for.cond.preheader 

BASIC BLOCK for.cond.preheader
%1370:	br	for.cond 

BASIC BLOCK if.then2
%1371:	call	fp format ap %1366 
%1372:	call	XXX XXX XXX XXX llvm.dbg.value 
%1373:	br	return 

BASIC BLOCK for.cond
%1374:	phi	%1608 format 
%1375:	phi	%1607 XXX 
%1376:	load	%1374 
%1377:	switch	%1376 for.inc248 XXX for.end250.loopexit414 XXX for.cond8.preheader 

BASIC BLOCK for.cond8.preheader
%1378:	getelementptr	%1374 XXX 
%1379:	load	%1378 
%1380:	icmp	%1379 XXX 
%1381:	br	%1380 land.rhs.lr.ph for.end250.loopexit414 

BASIC BLOCK land.rhs.lr.ph
%1382:	call	__ctype_b_loc 
%1383:	load	%1382 
%1384:	br	land.rhs 

BASIC BLOCK land.rhs
%1385:	phi	%1379 %1400 
%1386:	phi	%1374 %1387 
%1387:	phi	%1378 %1399 
%1388:	phi	XXX XXX 
%1389:	phi	XXX %1397 
%1390:	sext	%1385 
%1391:	getelementptr	%1383 %1390 
%1392:	load	%1391 
%1393:	and	%1392 XXX 
%1394:	icmp	%1393 XXX 
%1395:	br	%1394 for.body15 if.end25 

BASIC BLOCK for.body15
%1396:	call	XXX XXX XXX XXX llvm.dbg.value 
%1397:	select	%1388 %1387 %1389 
%1398:	call	XXX XXX XXX XXX llvm.dbg.value 
%1399:	getelementptr	%1386 XXX 
%1400:	load	%1399 
%1401:	icmp	%1400 XXX 
%1402:	br	%1401 land.rhs for.end250.loopexit413 

BASIC BLOCK if.end25
%1403:	phi	%1389 
%1404:	phi	%1388 
%1405:	phi	%1387 
%1406:	phi	%1386 
%1407:	phi	%1385 
%1408:	br	%1404 if.then27 land.rhs39.preheader 

BASIC BLOCK land.rhs39.preheader
%1409:	phi	%1414 %1407 
%1410:	phi	%1412 %1405 
%1411:	br	land.rhs39 

BASIC BLOCK for.cond36.preheader
%1412:	getelementptr	%1406 XXX 
%1413:	call	XXX XXX XXX XXX llvm.dbg.value 
%1414:	load	%1412 
%1415:	icmp	%1414 XXX 
%1416:	br	%1415 land.rhs39.preheader for.end250.loopexit414 

BASIC BLOCK if.then27
%1417:	icmp	%1407 XXX 
%1418:	br	%1417 if.else for.cond36.preheader 

BASIC BLOCK if.else
%1419:	add	%1375 XXX 
%1420:	call	XXX XXX XXX XXX llvm.dbg.value 
%1421:	call	XXX XXX XXX XXX llvm.dbg.value 
%1422:	br	for.inc248 

BASIC BLOCK land.rhs39
%1423:	phi	%1432 %1409 
%1424:	phi	%1430 %1410 
%1425:	sext	%1423 
%1426:	getelementptr	is_printf_flag XXX %1425 
%1427:	load	%1426 
%1428:	icmp	%1427 XXX 
%1429:	br	%1428 for.inc47 for.end49 

BASIC BLOCK for.inc47
%1430:	getelementptr	%1424 XXX 
%1431:	call	XXX XXX XXX XXX llvm.dbg.value 
%1432:	load	%1430 
%1433:	icmp	%1432 XXX 
%1434:	br	%1433 land.rhs39 for.end250.loopexit412 

BASIC BLOCK for.end49
%1435:	phi	%1424 
%1436:	phi	%1423 
%1437:	icmp	%1436 XXX 
%1438:	br	%1437 land.rhs99.preheader for.cond60.preheader 

BASIC BLOCK land.rhs99.preheader
%1439:	br	land.rhs99 

BASIC BLOCK for.cond60.preheader
%1440:	br	for.cond60 

BASIC BLOCK for.cond60
%1441:	phi	%1443 %1435 
%1442:	phi	XXX XXX 
%1443:	getelementptr	%1441 XXX 
%1444:	load	%1443 
%1445:	icmp	%1444 XXX 
%1446:	br	%1445 land.rhs63 for.end250.loopexit410 

BASIC BLOCK land.rhs63
%1447:	sext	%1444 
%1448:	getelementptr	%1383 %1447 
%1449:	load	%1448 
%1450:	and	%1449 XXX 
%1451:	icmp	%1450 XXX 
%1452:	br	%1451 for.cond60 if.end80 

BASIC BLOCK if.end80
%1453:	phi	%1444 
%1454:	phi	%1443 
%1455:	phi	%1442 
%1456:	phi	%1441 
%1457:	icmp	%1455 XXX 
%1458:	br	%1457 if.then82 if.else92 

BASIC BLOCK if.then82
%1459:	icmp	%1453 XXX 
%1460:	br	%1459 if.else88 if.then86 

BASIC BLOCK if.then86
%1461:	getelementptr	%1456 XXX 
%1462:	call	XXX XXX XXX XXX llvm.dbg.value 
%1463:	br	if.end117 

BASIC BLOCK if.else88
%1464:	add	%1375 XXX 
%1465:	call	XXX XXX XXX XXX llvm.dbg.value 
%1466:	call	XXX XXX XXX XXX llvm.dbg.value 
%1467:	br	for.inc248 

BASIC BLOCK if.else92
%1468:	add	%1375 XXX 
%1469:	call	XXX XXX XXX XXX llvm.dbg.value 
%1470:	br	if.end117 

BASIC BLOCK land.rhs99
%1471:	phi	%1481 %1436 
%1472:	phi	%1479 %1435 
%1473:	sext	%1471 
%1474:	getelementptr	%1383 %1473 
%1475:	load	%1474 
%1476:	and	%1475 XXX 
%1477:	icmp	%1476 XXX 
%1478:	br	%1477 for.inc109 if.end117.loopexit 

BASIC BLOCK for.inc109
%1479:	getelementptr	%1472 XXX 
%1480:	call	XXX XXX XXX XXX llvm.dbg.value 
%1481:	load	%1479 
%1482:	icmp	%1481 XXX 
%1483:	br	%1482 land.rhs99 for.end250.loopexit411 

BASIC BLOCK if.end117.loopexit
%1484:	phi	%1472 
%1485:	br	if.end117 

BASIC BLOCK if.end117
%1486:	phi	%1461 %1454 %1484 
%1487:	phi	%1375 %1468 %1375 
%1488:	load	%1486 
%1489:	icmp	%1488 XXX 
%1490:	br	%1489 if.end186 if.then121 

BASIC BLOCK if.then121
%1491:	getelementptr	%1486 XXX 
%1492:	call	XXX XXX XXX XXX llvm.dbg.value 
%1493:	load	%1491 
%1494:	switch	%1493 land.rhs167.preheader XXX if.then126 XXX for.end250.loopexit414 

BASIC BLOCK land.rhs167.preheader
%1495:	br	land.rhs167 

BASIC BLOCK if.then126
%1496:	getelementptr	%1486 XXX 
%1497:	call	XXX XXX XXX XXX llvm.dbg.value 
%1498:	call	XXX XXX XXX XXX llvm.dbg.value 
%1499:	load	%1496 
%1500:	icmp	%1499 XXX 
%1501:	br	%1500 land.rhs131.preheader for.end250.loopexit414 

BASIC BLOCK land.rhs131.preheader
%1502:	br	land.rhs131 

BASIC BLOCK land.rhs131
%1503:	phi	%1515 %1499 
%1504:	phi	XXX XXX 
%1505:	phi	%1513 %1496 
%1506:	sext	%1503 
%1507:	getelementptr	%1383 %1506 
%1508:	load	%1507 
%1509:	and	%1508 XXX 
%1510:	icmp	%1509 XXX 
%1511:	br	%1510 for.body140 if.end148 

BASIC BLOCK for.body140
%1512:	call	XXX XXX XXX XXX llvm.dbg.value 
%1513:	getelementptr	%1505 XXX 
%1514:	call	XXX XXX XXX XXX llvm.dbg.value 
%1515:	load	%1513 
%1516:	icmp	%1515 XXX 
%1517:	br	%1516 land.rhs131 for.end250.loopexit409 

BASIC BLOCK if.end148
%1518:	phi	%1505 
%1519:	phi	%1504 
%1520:	phi	%1503 
%1521:	icmp	%1519 XXX 
%1522:	br	%1521 if.then150 if.else160 

BASIC BLOCK if.then150
%1523:	icmp	%1520 XXX 
%1524:	br	%1523 if.else156 if.then154 

BASIC BLOCK if.then154
%1525:	getelementptr	%1518 XXX 
%1526:	call	XXX XXX XXX XXX llvm.dbg.value 
%1527:	load	%1525 
%1528:	br	if.end186 

BASIC BLOCK if.else156
%1529:	add	%1487 XXX 
%1530:	call	XXX XXX XXX XXX llvm.dbg.value 
%1531:	getelementptr	%1518 XXX 
%1532:	call	XXX XXX XXX XXX llvm.dbg.value 
%1533:	br	for.inc248 

BASIC BLOCK if.else160
%1534:	add	%1487 XXX 
%1535:	call	XXX XXX XXX XXX llvm.dbg.value 
%1536:	br	if.end186 

BASIC BLOCK for.cond164
%1537:	load	%1548 
%1538:	icmp	%1537 XXX 
%1539:	br	%1538 land.rhs167 for.end250.loopexit 

BASIC BLOCK land.rhs167
%1540:	phi	%1537 %1493 
%1541:	phi	%1548 %1491 
%1542:	phi	%1541 %1486 
%1543:	sext	%1540 
%1544:	getelementptr	%1383 %1543 
%1545:	load	%1544 
%1546:	and	%1545 XXX 
%1547:	icmp	%1546 XXX 
%1548:	getelementptr	%1542 XXX 
%1549:	call	XXX XXX XXX XXX llvm.dbg.value 
%1550:	br	%1547 for.cond164 for.end179 

BASIC BLOCK for.end179
%1551:	phi	%1541 
%1552:	phi	%1540 
%1553:	icmp	%1552 XXX 
%1554:	br	%1553 if.end186 for.end250.loopexit414 

BASIC BLOCK if.end186
%1555:	phi	%1527 %1520 %1552 %1488 
%1556:	phi	%1525 %1518 %1551 %1486 
%1557:	phi	%1487 %1534 %1487 %1487 
%1558:	sext	%1555 
%1559:	getelementptr	is_printf_lengthmod XXX %1558 
%1560:	load	%1559 
%1561:	icmp	%1560 XXX 
%1562:	br	%1561 if.then191 if.end220 

BASIC BLOCK if.then191
%1563:	getelementptr	%1556 XXX 
%1564:	call	XXX XXX XXX XXX llvm.dbg.value 
%1565:	load	%1563 
%1566:	switch	%1565 if.end214 XXX for.end250.loopexit414 XXX land.lhs.true XXX land.lhs.true207 

BASIC BLOCK land.lhs.true
%1567:	icmp	%1555 XXX 
%1568:	br	%1567 if.end220 if.then212 

BASIC BLOCK land.lhs.true207
%1569:	icmp	%1555 XXX 
%1570:	br	%1569 if.end220 if.then212 

BASIC BLOCK if.then212
%1571:	getelementptr	%1556 XXX 
%1572:	call	XXX XXX XXX XXX llvm.dbg.value 
%1573:	load	%1571 
%1574:	br	if.end214 

BASIC BLOCK if.end214
%1575:	phi	%1573 %1565 
%1576:	phi	%1571 %1563 
%1577:	icmp	%1575 XXX 
%1578:	br	%1577 if.end220 for.end250.loopexit414 

BASIC BLOCK if.end220
%1579:	phi	%1575 %1555 XXX XXX 
%1580:	phi	%1576 %1556 %1563 %1563 
%1581:	sext	%1579 
%1582:	getelementptr	is_printf_convspec XXX %1581 
%1583:	load	%1582 
%1584:	icmp	%1583 XXX 
%1585:	br	%1584 if.then225 for.inc248 

BASIC BLOCK if.then225
%1586:	add	%1557 XXX 
%1587:	call	XXX XXX XXX XXX llvm.dbg.value 
%1588:	icmp	%1403 XXX 
%1589:	br	%1588 if.then228 if.end236 

BASIC BLOCK if.then228
%1590:	call	%1403 atoi 
%1591:	add	%1590 XXX 
%1592:	br	if.end236 

BASIC BLOCK if.end236
%1593:	phi	%1591 %1586 
%1594:	icmp	%1579 XXX 
%1595:	br	%1594 for.inc248 if.then240 

BASIC BLOCK if.then240
%1596:	sext	%1593 
%1597:	shl	%1596 XXX 
%1598:	getelementptr	ap %1597 
%1599:	bitcast	%1598 
%1600:	load	%1599 
%1601:	call	%1600 _libsafe_raVariableP 
%1602:	icmp	%1601 XXX 
%1603:	br	%1602 if.then243 for.inc248 

BASIC BLOCK if.then243
%1604:	call	XXX _libsafe_die 
%1605:	br	for.inc248 

BASIC BLOCK for.inc248
%1606:	phi	%1580 %1580 %1580 %1580 %1531 %1456 %1406 %1374 
%1607:	phi	%1586 %1586 %1586 %1557 %1529 %1464 %1419 %1375 
%1608:	getelementptr	%1606 XXX 
%1609:	call	XXX XXX XXX XXX llvm.dbg.value 
%1610:	br	for.cond 

BASIC BLOCK for.end250.loopexit
%1611:	br	for.end250 

BASIC BLOCK for.end250.loopexit409
%1612:	br	for.end250 

BASIC BLOCK for.end250.loopexit410
%1613:	br	for.end250 

BASIC BLOCK for.end250.loopexit411
%1614:	br	for.end250 

BASIC BLOCK for.end250.loopexit412
%1615:	br	for.end250 

BASIC BLOCK for.end250.loopexit413
%1616:	br	for.end250 

BASIC BLOCK for.end250.loopexit414
%1617:	br	for.end250 

BASIC BLOCK for.end250
%1618:	load	_IO_vfprintf.real_vfprintf 
%1619:	call	fp format ap %1618 
%1620:	call	XXX XXX XXX XXX llvm.dbg.value 
%1621:	br	return 

BASIC BLOCK return
%1622:	phi	%1371 %1619 
%1623:	ret	%1622 

FUNCTION sprintf

BASIC BLOCK entry
%1624:	alloca	XXX 
%1625:	call	XXX XXX XXX XXX llvm.dbg.value 
%1626:	call	XXX XXX XXX XXX llvm.dbg.value 
%1627:	call	XXX XXX XXX llvm.dbg.declare 
%1628:	load	sprintf.real_vsprintf 
%1629:	icmp	%1628 XXX 
%1630:	br	%1629 if.end if.then 

BASIC BLOCK if.then
%1631:	call	XXX XXX XXX XXX llvm.dbg.value 
%1632:	call	XXX XXX dlsym 
%1633:	call	XXX XXX XXX XXX llvm.dbg.value 
%1634:	icmp	%1632 XXX 
%1635:	br	%1634 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1636:	load	stderr 
%1637:	call	dlerror 
%1638:	call	%1636 XXX XXX %1637 fprintf 
%1639:	call	XXX _exit 
%1640:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1641:	store	%1632 XXX 
%1642:	br	if.end 

BASIC BLOCK if.end
%1643:	load	sprintf.real_vsnprintf 
%1644:	icmp	%1643 XXX 
%1645:	br	%1644 if.end4 if.then2 

BASIC BLOCK if.then2
%1646:	call	XXX XXX XXX XXX llvm.dbg.value 
%1647:	call	XXX XXX dlsym 
%1648:	call	XXX XXX XXX XXX llvm.dbg.value 
%1649:	icmp	%1647 XXX 
%1650:	br	%1649 getLibraryFunction.exit51 if.then.i50 

BASIC BLOCK if.then.i50
%1651:	load	stderr 
%1652:	call	dlerror 
%1653:	call	%1651 XXX XXX %1652 fprintf 
%1654:	call	XXX _exit 
%1655:	unreachable	

BASIC BLOCK getLibraryFunction.exit51
%1656:	store	%1647 XXX 
%1657:	br	if.end4 

BASIC BLOCK if.end4
%1658:	load	_libsafe_exclude 
%1659:	icmp	%1658 XXX 
%1660:	br	%1659 if.then6 if.end12 

BASIC BLOCK if.then6
%1661:	getelementptr	%1624 XXX XXX 
%1662:	bitcast	%1624 
%1663:	call	%1662 llvm.va_start 
%1664:	load	sprintf.real_vsprintf 
%1665:	call	str format %1661 %1664 
%1666:	call	XXX XXX XXX XXX llvm.dbg.value 
%1667:	call	%1662 llvm.va_end 
%1668:	br	return 

BASIC BLOCK if.end12
%1669:	call	str _libsafe_stackVariableP 
%1670:	zext	%1669 
%1671:	call	XXX XXX XXX XXX llvm.dbg.value 
%1672:	icmp	%1669 XXX 
%1673:	getelementptr	%1624 XXX XXX 
%1674:	bitcast	%1624 
%1675:	call	%1674 llvm.va_start 
%1676:	br	%1672 if.end22 if.then15 

BASIC BLOCK if.then15
%1677:	load	sprintf.real_vsprintf 
%1678:	call	str format %1673 %1677 
%1679:	call	XXX XXX XXX XXX llvm.dbg.value 
%1680:	call	%1674 llvm.va_end 
%1681:	br	return 

BASIC BLOCK if.end22
%1682:	load	sprintf.real_vsnprintf 
%1683:	call	str %1670 format %1673 %1682 
%1684:	call	XXX XXX XXX XXX llvm.dbg.value 
%1685:	icmp	%1683 XXX 
%1686:	br	%1685 lor.lhs.false if.then32 

BASIC BLOCK lor.lhs.false
%1687:	sext	%1683 
%1688:	add	%1670 XXX 
%1689:	icmp	%1687 %1688 
%1690:	br	%1689 if.end33 if.then32 

BASIC BLOCK if.then32
%1691:	call	XXX _libsafe_die 
%1692:	br	if.end33 

BASIC BLOCK if.end33
%1693:	call	%1674 llvm.va_end 
%1694:	br	return 

BASIC BLOCK return
%1695:	phi	%1665 %1678 %1683 
%1696:	ret	%1695 

FUNCTION snprintf

BASIC BLOCK entry
%1697:	alloca	XXX 
%1698:	call	XXX XXX XXX XXX llvm.dbg.value 
%1699:	call	XXX XXX XXX XXX llvm.dbg.value 
%1700:	call	XXX XXX XXX XXX llvm.dbg.value 
%1701:	call	XXX XXX XXX llvm.dbg.declare 
%1702:	load	snprintf.real_vsnprintf 
%1703:	icmp	%1702 XXX 
%1704:	br	%1703 if.end if.then 

BASIC BLOCK if.then
%1705:	call	XXX XXX XXX XXX llvm.dbg.value 
%1706:	call	XXX XXX dlsym 
%1707:	call	XXX XXX XXX XXX llvm.dbg.value 
%1708:	icmp	%1706 XXX 
%1709:	br	%1708 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1710:	load	stderr 
%1711:	call	dlerror 
%1712:	call	%1710 XXX XXX %1711 fprintf 
%1713:	call	XXX _exit 
%1714:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1715:	store	%1706 XXX 
%1716:	br	if.end 

BASIC BLOCK if.end
%1717:	load	_libsafe_exclude 
%1718:	icmp	%1717 XXX 
%1719:	br	%1718 if.then2 if.end8 

BASIC BLOCK if.then2
%1720:	getelementptr	%1697 XXX XXX 
%1721:	bitcast	%1697 
%1722:	call	%1721 llvm.va_start 
%1723:	load	snprintf.real_vsnprintf 
%1724:	call	str size format %1720 %1723 
%1725:	call	XXX XXX XXX XXX llvm.dbg.value 
%1726:	call	%1721 llvm.va_end 
%1727:	br	return 

BASIC BLOCK if.end8
%1728:	call	str _libsafe_stackVariableP 
%1729:	zext	%1728 
%1730:	call	XXX XXX XXX XXX llvm.dbg.value 
%1731:	icmp	%1728 XXX 
%1732:	getelementptr	%1697 XXX XXX 
%1733:	bitcast	%1697 
%1734:	call	%1733 llvm.va_start 
%1735:	load	snprintf.real_vsnprintf 
%1736:	call	str size format %1732 %1735 
%1737:	call	XXX XXX XXX XXX llvm.dbg.value 
%1738:	br	%1731 if.end18 if.then11 

BASIC BLOCK if.then11
%1739:	call	%1733 llvm.va_end 
%1740:	br	return 

BASIC BLOCK if.end18
%1741:	icmp	%1736 XXX 
%1742:	br	%1741 lor.lhs.false land.lhs.true 

BASIC BLOCK lor.lhs.false
%1743:	sext	%1736 
%1744:	add	%1729 XXX 
%1745:	icmp	%1743 %1744 
%1746:	icmp	%1729 size 
%1747:	and	%1746 %1745 
%1748:	br	%1747 if.end31 if.then30 

BASIC BLOCK land.lhs.true
%1749:	icmp	%1729 size 
%1750:	br	%1749 if.end31 if.then30 

BASIC BLOCK if.then30
%1751:	call	XXX _libsafe_die 
%1752:	br	if.end31 

BASIC BLOCK if.end31
%1753:	call	%1733 llvm.va_end 
%1754:	br	return 

BASIC BLOCK return
%1755:	phi	%1724 %1736 %1736 
%1756:	ret	%1755 

FUNCTION vsprintf

BASIC BLOCK entry
%1757:	call	XXX XXX XXX XXX llvm.dbg.value 
%1758:	call	XXX XXX XXX XXX llvm.dbg.value 
%1759:	call	XXX XXX XXX XXX llvm.dbg.value 
%1760:	load	vsprintf.real_vsprintf 
%1761:	icmp	%1760 XXX 
%1762:	br	%1761 if.end if.then 

BASIC BLOCK if.then
%1763:	call	XXX XXX XXX XXX llvm.dbg.value 
%1764:	call	XXX XXX dlsym 
%1765:	call	XXX XXX XXX XXX llvm.dbg.value 
%1766:	icmp	%1764 XXX 
%1767:	br	%1766 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1768:	load	stderr 
%1769:	call	dlerror 
%1770:	call	%1768 XXX XXX %1769 fprintf 
%1771:	call	XXX _exit 
%1772:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1773:	store	%1764 XXX 
%1774:	br	if.end 

BASIC BLOCK if.end
%1775:	load	vsprintf.real_vsnprintf 
%1776:	icmp	%1775 XXX 
%1777:	br	%1776 if.end4 if.then2 

BASIC BLOCK if.then2
%1778:	call	XXX XXX XXX XXX llvm.dbg.value 
%1779:	call	XXX XXX dlsym 
%1780:	call	XXX XXX XXX XXX llvm.dbg.value 
%1781:	icmp	%1779 XXX 
%1782:	br	%1781 getLibraryFunction.exit37 if.then.i36 

BASIC BLOCK if.then.i36
%1783:	load	stderr 
%1784:	call	dlerror 
%1785:	call	%1783 XXX XXX %1784 fprintf 
%1786:	call	XXX _exit 
%1787:	unreachable	

BASIC BLOCK getLibraryFunction.exit37
%1788:	store	%1779 XXX 
%1789:	br	if.end4 

BASIC BLOCK if.end4
%1790:	load	_libsafe_exclude 
%1791:	icmp	%1790 XXX 
%1792:	br	%1791 if.then6 if.end8 

BASIC BLOCK if.then6
%1793:	load	vsprintf.real_vsprintf 
%1794:	call	str format ap %1793 
%1795:	br	return 

BASIC BLOCK if.end8
%1796:	call	str _libsafe_stackVariableP 
%1797:	zext	%1796 
%1798:	call	XXX XXX XXX XXX llvm.dbg.value 
%1799:	icmp	%1796 XXX 
%1800:	br	%1799 if.end13 if.then11 

BASIC BLOCK if.then11
%1801:	load	vsprintf.real_vsprintf 
%1802:	call	str format ap %1801 
%1803:	br	return 

BASIC BLOCK if.end13
%1804:	load	vsprintf.real_vsnprintf 
%1805:	call	str %1797 format ap %1804 
%1806:	call	XXX XXX XXX XXX llvm.dbg.value 
%1807:	icmp	%1805 XXX 
%1808:	br	%1807 lor.lhs.false if.then20 

BASIC BLOCK lor.lhs.false
%1809:	sext	%1805 
%1810:	add	%1797 XXX 
%1811:	icmp	%1809 %1810 
%1812:	br	%1811 return if.then20 

BASIC BLOCK if.then20
%1813:	call	XXX _libsafe_die 
%1814:	br	return 

BASIC BLOCK return
%1815:	phi	%1794 %1802 %1805 %1805 
%1816:	ret	%1815 

FUNCTION vsnprintf

BASIC BLOCK entry
%1817:	call	XXX XXX XXX XXX llvm.dbg.value 
%1818:	call	XXX XXX XXX XXX llvm.dbg.value 
%1819:	call	XXX XXX XXX XXX llvm.dbg.value 
%1820:	call	XXX XXX XXX XXX llvm.dbg.value 
%1821:	load	vsnprintf.real_vsnprintf 
%1822:	icmp	%1821 XXX 
%1823:	br	%1822 if.end if.then 

BASIC BLOCK if.then
%1824:	call	XXX XXX XXX XXX llvm.dbg.value 
%1825:	call	XXX XXX dlsym 
%1826:	call	XXX XXX XXX XXX llvm.dbg.value 
%1827:	icmp	%1825 XXX 
%1828:	br	%1827 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1829:	load	stderr 
%1830:	call	dlerror 
%1831:	call	%1829 XXX XXX %1830 fprintf 
%1832:	call	XXX _exit 
%1833:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1834:	store	%1825 XXX 
%1835:	bitcast	%1825 
%1836:	br	if.end 

BASIC BLOCK if.end
%1837:	phi	%1821 %1835 
%1838:	load	_libsafe_exclude 
%1839:	icmp	%1838 XXX 
%1840:	br	%1839 if.then2 if.end4 

BASIC BLOCK if.then2
%1841:	call	str size format ap %1837 
%1842:	br	return 

BASIC BLOCK if.end4
%1843:	call	str _libsafe_stackVariableP 
%1844:	zext	%1843 
%1845:	call	XXX XXX XXX XXX llvm.dbg.value 
%1846:	icmp	%1843 XXX 
%1847:	load	vsnprintf.real_vsnprintf 
%1848:	call	str size format ap %1847 
%1849:	br	%1846 if.end9 return 

BASIC BLOCK if.end9
%1850:	call	XXX XXX XXX XXX llvm.dbg.value 
%1851:	icmp	%1848 XXX 
%1852:	br	%1851 lor.lhs.false land.lhs.true 

BASIC BLOCK lor.lhs.false
%1853:	sext	%1848 
%1854:	add	%1844 XXX 
%1855:	icmp	%1853 %1854 
%1856:	icmp	%1844 size 
%1857:	and	%1856 %1855 
%1858:	br	%1857 return if.then18 

BASIC BLOCK land.lhs.true
%1859:	icmp	%1844 size 
%1860:	br	%1859 return if.then18 

BASIC BLOCK if.then18
%1861:	call	XXX _libsafe_die 
%1862:	br	return 

BASIC BLOCK return
%1863:	phi	%1841 %1848 %1848 XXX %1848 
%1864:	ret	%1863 

FUNCTION getwd

BASIC BLOCK entry
%1865:	call	XXX XXX XXX XXX llvm.dbg.value 
%1866:	load	getwd.real_getwd 
%1867:	icmp	%1866 XXX 
%1868:	br	%1867 if.end if.then 

BASIC BLOCK if.then
%1869:	call	XXX XXX XXX XXX llvm.dbg.value 
%1870:	call	XXX XXX dlsym 
%1871:	call	XXX XXX XXX XXX llvm.dbg.value 
%1872:	icmp	%1870 XXX 
%1873:	br	%1872 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1874:	load	stderr 
%1875:	call	dlerror 
%1876:	call	%1874 XXX XXX %1875 fprintf 
%1877:	call	XXX _exit 
%1878:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1879:	store	%1870 XXX 
%1880:	bitcast	%1870 
%1881:	br	if.end 

BASIC BLOCK if.end
%1882:	phi	%1866 %1880 
%1883:	load	_libsafe_exclude 
%1884:	icmp	%1883 XXX 
%1885:	br	%1884 if.then2 if.end4 

BASIC BLOCK if.then2
%1886:	call	buf %1882 
%1887:	br	return 

BASIC BLOCK if.end4
%1888:	call	buf _libsafe_stackVariableP 
%1889:	call	XXX XXX XXX XXX llvm.dbg.value 
%1890:	icmp	%1888 XXX 
%1891:	br	%1890 if.end9 if.then7 

BASIC BLOCK if.then7
%1892:	load	getwd.real_getwd 
%1893:	call	buf %1892 
%1894:	br	return 

BASIC BLOCK if.end9
%1895:	zext	%1888 
%1896:	call	buf XXX getcwd 
%1897:	call	XXX XXX XXX XXX llvm.dbg.value 
%1898:	call	buf strlen 
%1899:	add	%1898 XXX 
%1900:	icmp	%1899 %1895 
%1901:	br	%1900 return if.then14 

BASIC BLOCK if.then14
%1902:	call	XXX _libsafe_die 
%1903:	br	return 

BASIC BLOCK return
%1904:	phi	%1886 %1893 %1896 %1896 
%1905:	ret	%1904 

FUNCTION getcwd

FUNCTION strlen

FUNCTION gets

BASIC BLOCK entry
%1906:	call	XXX XXX XXX XXX llvm.dbg.value 
%1907:	load	gets.real_gets 
%1908:	icmp	%1907 XXX 
%1909:	br	%1908 if.end if.then 

BASIC BLOCK if.then
%1910:	call	XXX XXX XXX XXX llvm.dbg.value 
%1911:	call	XXX XXX dlsym 
%1912:	call	XXX XXX XXX XXX llvm.dbg.value 
%1913:	icmp	%1911 XXX 
%1914:	br	%1913 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1915:	load	stderr 
%1916:	call	dlerror 
%1917:	call	%1915 XXX XXX %1916 fprintf 
%1918:	call	XXX _exit 
%1919:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1920:	store	%1911 XXX 
%1921:	bitcast	%1911 
%1922:	br	if.end 

BASIC BLOCK if.end
%1923:	phi	%1907 %1921 
%1924:	load	_libsafe_exclude 
%1925:	icmp	%1924 XXX 
%1926:	br	%1925 if.then2 if.end4 

BASIC BLOCK if.then2
%1927:	call	s %1923 
%1928:	br	return 

BASIC BLOCK if.end4
%1929:	call	s _libsafe_stackVariableP 
%1930:	icmp	%1929 XXX 
%1931:	br	%1930 if.end9 if.then7 

BASIC BLOCK if.then7
%1932:	load	gets.real_gets 
%1933:	call	s %1932 
%1934:	br	return 

BASIC BLOCK if.end9
%1935:	load	stdin 
%1936:	call	s %1929 %1935 fgets 
%1937:	call	s strlen 
%1938:	call	XXX XXX XXX XXX llvm.dbg.value 
%1939:	add	%1937 XXX 
%1940:	getelementptr	s %1939 
%1941:	load	%1940 
%1942:	icmp	%1941 XXX 
%1943:	br	%1942 return if.then16 

BASIC BLOCK if.then16
%1944:	store	XXX %1940 
%1945:	br	return 

BASIC BLOCK return
%1946:	phi	%1927 %1933 s s 
%1947:	ret	%1946 

FUNCTION realpath

BASIC BLOCK entry
%1948:	alloca	XXX 
%1949:	call	XXX XXX XXX XXX llvm.dbg.value 
%1950:	call	XXX XXX XXX XXX llvm.dbg.value 
%1951:	getelementptr	%1948 XXX XXX 
%1952:	call	XXX %1951 llvm.lifetime.start 
%1953:	call	XXX XXX XXX llvm.dbg.declare 
%1954:	load	real_memcpy 
%1955:	icmp	%1954 XXX 
%1956:	br	%1955 if.end if.then 

BASIC BLOCK if.then
%1957:	call	XXX XXX XXX XXX llvm.dbg.value 
%1958:	call	XXX XXX dlsym 
%1959:	call	XXX XXX XXX XXX llvm.dbg.value 
%1960:	icmp	%1958 XXX 
%1961:	br	%1960 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%1962:	load	stderr 
%1963:	call	dlerror 
%1964:	call	%1962 XXX XXX %1963 fprintf 
%1965:	call	XXX _exit 
%1966:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%1967:	store	%1958 XXX 
%1968:	br	if.end 

BASIC BLOCK if.end
%1969:	load	realpath.real_realpath 
%1970:	icmp	%1969 XXX 
%1971:	br	%1970 if.end4 if.then2 

BASIC BLOCK if.then2
%1972:	call	XXX XXX XXX XXX llvm.dbg.value 
%1973:	call	XXX XXX dlsym 
%1974:	call	XXX XXX XXX XXX llvm.dbg.value 
%1975:	icmp	%1973 XXX 
%1976:	br	%1975 getLibraryFunction.exit36 if.then.i35 

BASIC BLOCK if.then.i35
%1977:	load	stderr 
%1978:	call	dlerror 
%1979:	call	%1977 XXX XXX %1978 fprintf 
%1980:	call	XXX _exit 
%1981:	unreachable	

BASIC BLOCK getLibraryFunction.exit36
%1982:	store	%1973 XXX 
%1983:	bitcast	%1973 
%1984:	br	if.end4 

BASIC BLOCK if.end4
%1985:	phi	%1969 %1983 
%1986:	load	_libsafe_exclude 
%1987:	icmp	%1986 XXX 
%1988:	br	%1987 if.then6 if.end8 

BASIC BLOCK if.then6
%1989:	call	path resolved_path %1985 
%1990:	br	cleanup 

BASIC BLOCK if.end8
%1991:	call	resolved_path _libsafe_stackVariableP 
%1992:	zext	%1991 
%1993:	call	XXX XXX XXX XXX llvm.dbg.value 
%1994:	icmp	%1991 XXX 
%1995:	load	realpath.real_realpath 
%1996:	br	%1994 if.end13 if.then11 

BASIC BLOCK if.then11
%1997:	call	path resolved_path %1995 
%1998:	br	cleanup 

BASIC BLOCK if.end13
%1999:	call	path %1951 %1995 
%2000:	call	XXX XXX XXX XXX llvm.dbg.value 
%2001:	call	%1951 %1992 strnlen 
%2002:	call	XXX XXX XXX XXX llvm.dbg.value 
%2003:	icmp	%2001 %1992 
%2004:	br	%2003 if.end20 if.then19 

BASIC BLOCK if.then19
%2005:	call	XXX _libsafe_die 
%2006:	br	if.end20 

BASIC BLOCK if.end20
%2007:	load	real_memcpy 
%2008:	add	%2001 XXX 
%2009:	call	resolved_path %1951 %2008 %2007 
%2010:	icmp	%1999 XXX 
%2011:	select	%2010 XXX resolved_path 
%2012:	br	cleanup 

BASIC BLOCK cleanup
%2013:	phi	%1989 %1997 %2011 
%2014:	call	XXX %1951 llvm.lifetime.end 
%2015:	ret	%2013 

FUNCTION _IO_vfscanf

BASIC BLOCK entry
%2016:	alloca	XXX 
%2017:	alloca	XXX 
%2018:	call	XXX XXX XXX XXX llvm.dbg.value 
%2019:	call	XXX XXX XXX XXX llvm.dbg.value 
%2020:	call	XXX XXX XXX XXX llvm.dbg.value 
%2021:	call	XXX XXX XXX XXX llvm.dbg.value 
%2022:	bitcast	%2016 
%2023:	call	XXX %2022 llvm.lifetime.start 
%2024:	call	XXX XXX XXX llvm.dbg.declare 
%2025:	bitcast	%2017 
%2026:	call	XXX %2025 llvm.lifetime.start 
%2027:	call	XXX XXX XXX llvm.dbg.declare 
%2028:	load	_IO_vfscanf.real_IO_vfscanf 
%2029:	icmp	%2028 XXX 
%2030:	br	%2029 if.end if.then 

BASIC BLOCK if.then
%2031:	call	XXX XXX XXX XXX llvm.dbg.value 
%2032:	call	XXX XXX dlsym 
%2033:	call	XXX XXX XXX XXX llvm.dbg.value 
%2034:	icmp	%2032 XXX 
%2035:	br	%2034 getLibraryFunction.exit if.then.i 

BASIC BLOCK if.then.i
%2036:	load	stderr 
%2037:	call	dlerror 
%2038:	call	%2036 XXX XXX %2037 fprintf 
%2039:	call	XXX _exit 
%2040:	unreachable	

BASIC BLOCK getLibraryFunction.exit
%2041:	store	%2032 XXX 
%2042:	bitcast	%2032 
%2043:	br	if.end 

BASIC BLOCK if.end
%2044:	phi	%2028 %2042 
%2045:	load	_libsafe_exclude 
%2046:	icmp	%2045 XXX 
%2047:	br	%2046 if.then2 if.end4 

BASIC BLOCK if.then2
%2048:	call	s format argptr errp %2044 
%2049:	br	cleanup 

BASIC BLOCK if.end4
%2050:	getelementptr	%2016 XXX XXX 
%2051:	getelementptr	%2017 XXX XXX 
%2052:	call	XXX %2050 %2051 _libsafe_save_ra_fp 
%2053:	call	XXX XXX XXX XXX llvm.dbg.value 
%2054:	load	_IO_vfscanf.real_IO_vfscanf 
%2055:	call	s format argptr errp %2054 
%2056:	call	XXX XXX XXX XXX llvm.dbg.value 
%2057:	icmp	%2052 XXX 
%2058:	br	%2057 cleanup land.lhs.true 

BASIC BLOCK land.lhs.true
%2059:	call	%2052 %2050 %2051 _libsafe_verify_ra_fp 
%2060:	icmp	%2059 XXX 
%2061:	br	%2060 cleanup if.then12 

BASIC BLOCK if.then12
%2062:	call	XXX _libsafe_die 
%2063:	br	cleanup 

BASIC BLOCK cleanup
%2064:	phi	%2048 %2055 %2055 %2055 
%2065:	call	XXX %2025 llvm.lifetime.end 
%2066:	call	XXX %2022 llvm.lifetime.end 
%2067:	ret	%2064 

FUNCTION strncmp

FUNCTION dlsym

FUNCTION dlerror

FUNCTION _exit

FUNCTION _intercept_init

BASIC BLOCK entry
%2068:	alloca	XXX 
%2069:	alloca	XXX 
%2070:	getelementptr	%2068 XXX XXX 
%2071:	call	XXX %2070 llvm.lifetime.start 
%2072:	call	XXX XXX XXX llvm.dbg.declare 
%2073:	getelementptr	%2069 XXX XXX 
%2074:	call	XXX %2073 llvm.lifetime.start 
%2075:	call	XXX XXX XXX llvm.dbg.declare 
%2076:	call	XXX XXX XXX XXX llvm.dbg.value 
%2077:	call	XXX %2070 XXX readlink 
%2078:	trunc	%2077 
%2079:	call	XXX XXX XXX XXX llvm.dbg.value 
%2080:	icmp	%2078 XXX 
%2081:	br	%2080 if.else.i if.then.i 

BASIC BLOCK if.then.i
%2082:	store	XXX %2070 
%2083:	br	get_exename.exit 

BASIC BLOCK if.else.i
%2084:	shl	%2077 XXX 
%2085:	ashr	%2084 XXX 
%2086:	getelementptr	%2068 XXX %2085 
%2087:	store	XXX %2086 
%2088:	br	get_exename.exit 

BASIC BLOCK get_exename.exit
%2089:	call	XXX XXX fopen 
%2090:	call	XXX XXX XXX XXX llvm.dbg.value 
%2091:	icmp	%2089 XXX 
%2092:	br	%2091 while.cond.preheader if.end21 

BASIC BLOCK while.cond.preheader
%2093:	call	%2073 XXX %2089 fgets 
%2094:	icmp	%2093 XXX 
%2095:	br	%2094 while.body.preheader while.end 

BASIC BLOCK while.body.preheader
%2096:	br	while.body 

BASIC BLOCK while.body
%2097:	call	%2073 XXX strnlen 
%2098:	add	%2097 XXX 
%2099:	getelementptr	%2069 XXX %2098 
%2100:	store	XXX %2099 
%2101:	call	%2073 %2070 XXX strncmp 
%2102:	icmp	%2101 XXX 
%2103:	br	%2102 if.end if.then10 

BASIC BLOCK if.then10
%2104:	store	XXX _libsafe_exclude 
%2105:	br	if.end 

BASIC BLOCK if.end
%2106:	call	%2073 XXX XXX strncmp 
%2107:	icmp	%2106 XXX 
%2108:	br	%2107 while.cond.backedge if.then14 

BASIC BLOCK if.then14
%2109:	call	geteuid 
%2110:	icmp	%2109 XXX 
%2111:	br	%2110 while.cond.backedge if.then17 

BASIC BLOCK while.cond.backedge
%2112:	call	%2073 XXX %2089 fgets 
%2113:	icmp	%2112 XXX 
%2114:	br	%2113 while.body while.end.loopexit 

BASIC BLOCK if.then17
%2115:	store	XXX _libsafe_exclude 
%2116:	br	while.cond.backedge 

BASIC BLOCK while.end.loopexit
%2117:	br	while.end 

BASIC BLOCK while.end
%2118:	call	%2089 fclose 
%2119:	br	if.end21 

BASIC BLOCK if.end21
%2120:	call	XXX %2073 llvm.lifetime.end 
%2121:	call	XXX %2070 llvm.lifetime.end 
%2122:	ret	

FUNCTION _intercept_fini

BASIC BLOCK entry
%2123:	ret	
---- Replaying call stack input ----
(intercept.c : 158)

(toy_bypass.c : 22)
ERROR: <toy_bypass.c 22> sourcetoIRmap_ look up failed.

---- Getting Corrupted LLVM IRs ----
Original Callstack: Go into "strcpy"
Adding corrupted variable: %606
"strcpy" calls "dlsym"
Callstack PUSH dlsym
Couldn't obtain the source code of function "dlsym"
Callstack POP dlsym
"strcpy" calls "dlerror"
Callstack PUSH dlerror
Couldn't obtain the source code of function "dlerror"
Callstack POP dlerror
"strcpy" calls "fprintf"
Callstack PUSH fprintf
Couldn't obtain the source code of function "fprintf"
Callstack POP fprintf
"strcpy" calls "_exit"
Callstack PUSH _exit
Couldn't obtain the source code of function "_exit"
Callstack POP _exit
Couldn't get callee for instruction   %call7 = tail call i8* %5(i8* %dest, i8* %src) #3, !dbg !596
"strcpy" calls "_libsafe_stackVariableP"
Callstack PUSH _libsafe_stackVariableP
Callstack POP _libsafe_stackVariableP
Couldn't get callee for instruction   %call12 = tail call i8* %7(i8* %dest, i8* %src) #3, !dbg !603
"strcpy" calls "strnlen"
Callstack PUSH strnlen
Couldn't obtain the source code of function "strnlen"
Callstack POP strnlen
"strcpy" calls "_libsafe_die"
Callstack PUSH _libsafe_die
"_libsafe_die" calls "_libsafe_warn"
Callstack PUSH _libsafe_warn
"_libsafe_warn" calls "readlink"
Callstack PUSH readlink
Couldn't obtain the source code of function "readlink"
Callstack POP readlink
"_libsafe_warn" calls "getpid"
Callstack PUSH getpid
Couldn't obtain the source code of function "getpid"
Callstack POP getpid
"_libsafe_warn" calls "snprintf"
Callstack PUSH snprintf
"snprintf" calls "dlsym"
Callstack PUSH dlsym
Couldn't obtain the source code of function "dlsym"
Callstack POP dlsym
"snprintf" calls "dlerror"
Callstack PUSH dlerror
Couldn't obtain the source code of function "dlerror"
Callstack POP dlerror
"snprintf" calls "fprintf"
Callstack PUSH fprintf
Couldn't obtain the source code of function "fprintf"
Callstack POP fprintf
"snprintf" calls "_exit"
Callstack PUSH _exit
Couldn't obtain the source code of function "_exit"
Callstack POP _exit
Couldn't get callee for instruction   %call5 = call i32 %3(i8* %str, i64 %size, i8* %format, %struct.__va_list_tag* %arraydecay) #3, !dbg !584
"snprintf" calls "_libsafe_stackVariableP"
Callstack PUSH _libsafe_stackVariableP
Callstack POP _libsafe_stackVariableP
Couldn't get callee for instruction   %call15 = call i32 %4(i8* %str, i64 %size, i8* %format, %struct.__va_list_tag* %arraydecay12) #3, !dbg !594
Callstack POP snprintf
"_libsafe_warn" calls "fopen"
Callstack PUSH fopen
Couldn't obtain the source code of function "fopen"
Callstack POP fopen
"_libsafe_warn" calls "fgets"
Callstack PUSH fgets
Couldn't obtain the source code of function "fgets"
Callstack POP fgets
"_libsafe_warn" calls "fclose"
Callstack PUSH fclose
Couldn't obtain the source code of function "fclose"
Callstack POP fclose
"_libsafe_warn" calls "malloc"
Callstack PUSH malloc
Couldn't obtain the source code of function "malloc"
Callstack POP malloc
"_libsafe_warn" calls "fopen"
Callstack PUSH fopen
Couldn't obtain the source code of function "fopen"
Callstack POP fopen
"_libsafe_warn" calls "fgets"
Callstack PUSH fgets
Couldn't obtain the source code of function "fgets"
Callstack POP fgets
"_libsafe_warn" calls "free"
Callstack PUSH free
Couldn't obtain the source code of function "free"
Callstack POP free
"_libsafe_warn" calls "__isoc99_sscanf"
Callstack PUSH __isoc99_sscanf
Couldn't obtain the source code of function "__isoc99_sscanf"
Callstack POP __isoc99_sscanf
"_libsafe_warn" calls "strchr"
Callstack PUSH strchr
Couldn't obtain the source code of function "strchr"
Callstack POP strchr
"_libsafe_warn" calls "__strdup"
Callstack PUSH __strdup
Couldn't obtain the source code of function "__strdup"
Callstack POP __strdup
"_libsafe_warn" calls "strchr"
Callstack PUSH strchr
Couldn't obtain the source code of function "strchr"
Callstack POP strchr
"_libsafe_warn" calls "fgets"
Callstack PUSH fgets
Couldn't obtain the source code of function "fgets"
Callstack POP fgets
"_libsafe_warn" calls "fclose"
Callstack PUSH fclose
Couldn't obtain the source code of function "fclose"
Callstack POP fclose
"_libsafe_warn" calls "openlog"
Callstack PUSH openlog
Couldn't obtain the source code of function "openlog"
Callstack POP openlog
"_libsafe_warn" calls "syslog"
Callstack PUSH syslog
Couldn't obtain the source code of function "syslog"
Callstack POP syslog
"_libsafe_warn" calls "syslog"
Callstack PUSH syslog
Couldn't obtain the source code of function "syslog"
Callstack POP syslog
"_libsafe_warn" calls "syslog"
Callstack PUSH syslog
Couldn't obtain the source code of function "syslog"
Callstack POP syslog
"_libsafe_warn" calls "getuid"
Callstack PUSH getuid
Couldn't obtain the source code of function "getuid"
Callstack POP getuid
"_libsafe_warn" calls "geteuid"
Callstack PUSH geteuid
Couldn't obtain the source code of function "geteuid"
Callstack POP geteuid
"_libsafe_warn" calls "getpid"
Callstack PUSH getpid
Couldn't obtain the source code of function "getpid"
Callstack POP getpid
"_libsafe_warn" calls "syslog"
Callstack PUSH syslog
Couldn't obtain the source code of function "syslog"
Callstack POP syslog
"_libsafe_warn" calls "fprintf"
Callstack PUSH fprintf
Couldn't obtain the source code of function "fprintf"
Callstack POP fprintf
"_libsafe_warn" calls "fwrite"
Callstack PUSH fwrite
Couldn't obtain the source code of function "fwrite"
Callstack POP fwrite
"_libsafe_warn" calls "fprintf"
Callstack PUSH fprintf
Couldn't obtain the source code of function "fprintf"
Callstack POP fprintf
"_libsafe_warn" calls "getuid"
Callstack PUSH getuid
Couldn't obtain the source code of function "getuid"
Callstack POP getuid
"_libsafe_warn" calls "geteuid"
Callstack PUSH geteuid
Couldn't obtain the source code of function "geteuid"
Callstack POP geteuid
"_libsafe_warn" calls "getpid"
Callstack PUSH getpid
Couldn't obtain the source code of function "getpid"
Callstack POP getpid
"_libsafe_warn" calls "fprintf"
Callstack PUSH fprintf
Couldn't obtain the source code of function "fprintf"
Callstack POP fprintf
"_libsafe_warn" calls "syslog"
Callstack PUSH syslog
Couldn't obtain the source code of function "syslog"
Callstack POP syslog
"_libsafe_warn" calls "fwrite"
Callstack PUSH fwrite
Couldn't obtain the source code of function "fwrite"
Callstack POP fwrite
"_libsafe_warn" calls "syslog"
Callstack PUSH syslog
Couldn't obtain the source code of function "syslog"
Callstack POP syslog
"_libsafe_warn" calls "fprintf"
Callstack PUSH fprintf
Couldn't obtain the source code of function "fprintf"
Callstack POP fprintf
"_libsafe_warn" calls "syslog"
Callstack PUSH syslog
Couldn't obtain the source code of function "syslog"
Callstack POP syslog
"_libsafe_warn" calls "vfprintf"
Callstack PUSH vfprintf
"vfprintf" calls "dlsym"
Callstack PUSH dlsym
Couldn't obtain the source code of function "dlsym"
Callstack POP dlsym
"vfprintf" calls "dlerror"
Callstack PUSH dlerror
Couldn't obtain the source code of function "dlerror"
Callstack POP dlerror
"vfprintf" calls "fprintf"
Callstack PUSH fprintf
Couldn't obtain the source code of function "fprintf"
Callstack POP fprintf
"vfprintf" calls "_exit"
Callstack PUSH _exit
Couldn't obtain the source code of function "_exit"
Callstack POP _exit
Couldn't get callee for instruction   %call3 = tail call i32 %3(%struct._IO_FILE* %fp, i8* %format, %struct.__va_list_tag* %ap) #3, !dbg !583
"vfprintf" calls "__ctype_b_loc"
Callstack PUSH __ctype_b_loc
Couldn't obtain the source code of function "__ctype_b_loc"
Callstack POP __ctype_b_loc
"vfprintf" calls "atoi"
Callstack PUSH atoi
Couldn't obtain the source code of function "atoi"
Callstack POP atoi
"vfprintf" calls "_libsafe_raVariableP"
Callstack PUSH _libsafe_raVariableP
Callstack POP _libsafe_raVariableP
Couldn't get callee for instruction   %call251 = tail call i32 %32(%struct._IO_FILE* %fp, i8* %format, %struct.__va_list_tag* %ap) #3, !dbg !747
Callstack POP vfprintf
"_libsafe_warn" calls "fputc"
Callstack PUSH fputc
Couldn't obtain the source code of function "fputc"
Callstack POP fputc
"_libsafe_warn" calls "free"
Callstack PUSH free
Couldn't obtain the source code of function "free"
Callstack POP free
Callstack POP _libsafe_warn
"_libsafe_die" calls "raise"
Callstack PUSH raise
Couldn't obtain the source code of function "raise"
Callstack POP raise
Callstack POP _libsafe_die
Couldn't get callee for instruction   %call19 = tail call i8* %8(i8* %dest, i8* %src, i64 %add) #3, !dbg !612
Callstack POP strcpy

---- Part 1: Dataflow Result ---- 
[ 606 607 608 622 ]
%606:	load	strcpy.real_strcpy 
%607:	icmp	%606 XXX 
%608:	br	%607 if.end4 if.then2 
%622:	phi	%606 %620 

*********************************************************
     Pointer Dereference Analysis Result                 
   # of static pointer deference statements: 65

   # of detected potential vulnerabilities: 0
*********************************************************

*********************************************************
     Dangerous Function Analysis Result                  
   # of static dangerous function statements: 17

---- Part 3: Path Intersection ----
[ 606 607 608 622 ]
%606:	load	strcpy.real_strcpy 
%607:	icmp	%606 XXX 
%608:	br	%607 if.end4 if.then2 
%622:	phi	%606 %620 
Dangerous Operation Basic Block & Instruction
if.end18 & 642
Function: strcpy(...) Location: (intercept.c:179)

---- Part 3: Path Intersection ----
[ 606 607 608 622 ]
%606:	load	strcpy.real_strcpy 
%607:	icmp	%606 XXX 
%608:	br	%607 if.end4 if.then2 
%622:	phi	%606 %620 
Dangerous Operation Basic Block & Instruction
if.then11 & 633
Function: strcpy(...) Location: (intercept.c:166)

---- Part 3: Path Intersection ----
[ 606 607 608 622 ]
%606:	load	strcpy.real_strcpy 
%607:	icmp	%606 XXX 
%608:	br	%607 if.end4 if.then2 
%622:	phi	%606 %620 
Dangerous Operation Basic Block & Instruction
if.then6 & 626
Function: strcpy(...) Location: (intercept.c:162)

   # of detected potential vulnerabilities: 3
*********************************************************

