+ '[' '!' 2 -eq 2 ']'
+ TEST_DIR=TESTS/mongoose-3.6
+ CONANAL_DIR=lib/ConAnal
+ DOL_DIR=lib/DOL
+ BITCODE_DIR=/home/ruigu/Workspace/ConAnalysis/build/TESTS/mongoose-3.6
+ cd /home/ruigu/Workspace/ConAnalysis/build/TESTS/mongoose-3.6
+ opt -load ../../lib/DOL/libDOL.so --danFuncFile danMemFuncLists.txt -load ../../lib/ConAnal/libConAnalysis.so -ConAnalysis ../../../TESTS/mongoose-3.6/mongoose-3.6.bc --ptrderef --danfunc --raceReport tsan_race_report19
---------------------------------------
           Start DOL Pass              
---------------------------------------
Read 18 dangerous functions from danMemFuncLists.txt

---------------------------------------
       Start ConAnalysis Pass          
---------------------------------------
---- Replaying call stack input ----
(mongoose.c : 2008)
(mongoose.c : 4306)
(mongoose.c : 4852)

---- Part 1: Dataflow Result ---- 
[ 8164 8165 8166 8169 list 6491 6492 6493 6494 6495 6496 6500 6499 8170 8172 8173 3875 ]
%8164:	getelementptr	ctx XXX XXX 
%8165:	getelementptr	%8164 XXX XXX 
%8166:	load	%8165 
%8169:	phi	%8166 %8170 
Function args: list
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
%8170:	call	%8169 %8155 %8156 next_option 
%8172:	icmp	%8170 XXX 
%8173:	br	%8172 while.end while.body 
%3875:	call	conn %3874 %3629 handle_file_request 

*********************************************************
     Pointer Dereference Analysis Result                 
   # of static pointer deference statements: 951

---- Part 3: Path Intersection ----
[ 8164 8165 8166 8169 8170 8172 8173 ]
%8164:	getelementptr	ctx XXX XXX 
%8165:	getelementptr	%8164 XXX XXX 
%8166:	load	%8165 
%8169:	phi	%8166 %8170 
%8170:	call	%8169 %8155 %8156 next_option 
%8172:	icmp	%8170 XXX 
%8173:	br	%8172 while.end while.body 
Function: get_mime_type(...) Location: (mongoose.c:2019)

---- Part 3: Path Intersection ----
[ 8164 8165 8166 8169 8170 8172 8173 ]
%8164:	getelementptr	ctx XXX XXX 
%8165:	getelementptr	%8164 XXX XXX 
%8166:	load	%8165 
%8169:	phi	%8166 %8170 
%8170:	call	%8169 %8155 %8156 next_option 
%8172:	icmp	%8170 XXX 
%8173:	br	%8172 while.end while.body 
Function: get_mime_type(...) Location: (mongoose.c:2018)

---- Part 3: Path Intersection ----
[ 8164 8165 8166 8169 8170 8172 8173 ]
%8164:	getelementptr	ctx XXX XXX 
%8165:	getelementptr	%8164 XXX XXX 
%8166:	load	%8165 
%8169:	phi	%8166 %8170 
%8170:	call	%8169 %8155 %8156 next_option 
%8172:	icmp	%8170 XXX 
%8173:	br	%8172 while.end while.body 
Function: get_mime_type(...) Location: (mongoose.c:2012)

---- Part 3: Path Intersection ----
[ 8164 8165 8166 8169 8170 8172 8173 ]
%8164:	getelementptr	ctx XXX XXX 
%8165:	getelementptr	%8164 XXX XXX 
%8166:	load	%8165 
%8169:	phi	%8166 %8170 
%8170:	call	%8169 %8155 %8156 next_option 
%8172:	icmp	%8170 XXX 
%8173:	br	%8172 while.end while.body 
Function: get_mime_type(...) Location: (mongoose.c:2011)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:870)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:869)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:868)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:867)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:866)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:865)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:859)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:858)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:855)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:854)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:852)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:851)

   # of detected potential vulnerabilities: 16
*********************************************************

*********************************************************
     Dangerous Function Analysis Result                  
   # of static dangerous function statements: 18

   # of detected potential vulnerabilities: 0
*********************************************************

