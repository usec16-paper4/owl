+ '[' '!' 2 -eq 2 ']'
+ TEST_DIR=TESTS/mongoose-3.6
+ CONANAL_DIR=lib/ConAnal
+ DOL_DIR=lib/DOL
+ BITCODE_DIR=/home/ruigu/Workspace/ConAnalysis/build/TESTS/mongoose-3.6
+ cd /home/ruigu/Workspace/ConAnalysis/build/TESTS/mongoose-3.6
+ opt -load ../../lib/DOL/libDOL.so --danFuncFile danMemFuncLists.txt -load ../../lib/ConAnal/libConAnalysis.so -ConAnalysis ../../../TESTS/mongoose-3.6/mongoose-3.6.bc --ptrderef --danfunc --raceReport tsan_race_report67
---------------------------------------
           Start DOL Pass              
---------------------------------------
Read 18 dangerous functions from danMemFuncLists.txt

---------------------------------------
       Start ConAnalysis Pass          
---------------------------------------
---- Replaying call stack input ----
(mongoose.c : 1796)
(mongoose.c : 4852)

---- Part 1: Dataflow Result ---- 
[ 4016 4017 4018 4019 4020 4023 list 6491 6492 6493 6494 6495 6496 6500 6499 4024 4026 4027 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 pattern pattern_len 4666 4667 4669 4670 4671 4672 4673 4674 4680 4681 4682 4683 4684 4685 4686 4687 4698 4699 4701 4702 4703 4704 4705 4714 4715 4716 4717 4718 4730 4731 4732 4733 4734 4738 4739 4740 4741 4742 4759 4760 4766 4767 4793 4794 4795 4800 4801 4076 4077 4078 3381 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
Function args: list
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
%4064:	getelementptr	conn XXX XXX 
%4065:	load	%4064 
%4066:	getelementptr	%4065 XXX XXX 
%4067:	getelementptr	%4066 XXX XXX 
%4068:	load	%4067 
%4069:	getelementptr	conn XXX XXX 
%4070:	load	%4069 
%4071:	getelementptr	%4070 XXX XXX 
%4072:	getelementptr	%4071 XXX XXX 
%4073:	load	%4072 
%4074:	call	%4073 strlen 
%4075:	trunc	%4074 
Function args: pattern
Function args: pattern_len
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4671:	ptrtoint	%4667 
%4672:	ptrtoint	pattern 
%4673:	sub	%4671 %4672 
%4674:	trunc	%4673 
%4680:	getelementptr	%4667 XXX 
%4681:	sext	pattern_len 
%4682:	getelementptr	pattern %4681 
%4683:	getelementptr	%4667 XXX 
%4684:	ptrtoint	%4682 
%4685:	ptrtoint	%4683 
%4686:	sub	%4684 %4685 
%4687:	trunc	%4686 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
%4714:	getelementptr	pattern %4713 
%4715:	load	%4714 
%4716:	sext	%4715 
%4717:	icmp	%4716 XXX 
%4718:	br	%4717 if.else39 if.then29 
%4730:	getelementptr	pattern %4729 
%4731:	load	%4730 
%4732:	sext	%4731 
%4733:	icmp	%4732 XXX 
%4734:	br	%4733 if.else86 if.then45 
%4738:	getelementptr	pattern %4737 
%4739:	load	%4738 
%4740:	sext	%4739 
%4741:	icmp	%4740 XXX 
%4742:	br	%4741 if.else57 if.then51 
%4759:	icmp	%4757 pattern_len 
%4760:	br	%4759 if.end66 if.then65 
%4766:	getelementptr	pattern %4765 
%4767:	sub	pattern_len %4757 
%4793:	getelementptr	pattern %4792 
%4794:	load	%4793 
%4795:	sext	%4794 
%4800:	icmp	%4795 %4799 
%4801:	br	%4800 if.end96 if.then95 
%4076:	call	%4068 %4075 buf match_prefix 
%4077:	icmp	%4076 XXX 
%4078:	br	%4077 if.else land.lhs.true 
%3381:	call	conn handle_request 

*********************************************************
     Pointer Dereference Analysis Result                 
   # of static pointer deference statements: 951

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:870)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:869)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:868)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:867)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:866)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:865)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:859)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:858)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:855)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:854)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6500 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6500:	store	list %6499 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:852)

---- Part 3: Path Intersection ----
[ 6491 6492 6493 6494 6495 6496 6499 ]
%6491:	icmp	list XXX 
%6492:	br	%6491 lor.lhs.false if.then 
%6493:	load	list 
%6494:	sext	%6493 
%6495:	icmp	%6494 XXX 
%6496:	br	%6495 if.else if.then 
%6499:	getelementptr	val XXX XXX 
Function: next_option(...) Location: (mongoose.c:851)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 4701 4702 4703 4704 4705 4714 4715 4716 4717 4718 4730 4731 4732 4733 4734 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
%4714:	getelementptr	pattern %4713 
%4715:	load	%4714 
%4716:	sext	%4715 
%4717:	icmp	%4716 XXX 
%4718:	br	%4717 if.else39 if.then29 
%4730:	getelementptr	pattern %4729 
%4731:	load	%4730 
%4732:	sext	%4731 
%4733:	icmp	%4732 XXX 
%4734:	br	%4733 if.else86 if.then45 
Function: match_prefix(...) Location: (mongoose.c:910)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 4701 4702 4703 4704 4705 4714 4715 4716 4717 4718 4730 4731 4732 4733 4734 4738 4739 4740 4741 4742 4759 4760 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
%4714:	getelementptr	pattern %4713 
%4715:	load	%4714 
%4716:	sext	%4715 
%4717:	icmp	%4716 XXX 
%4718:	br	%4717 if.else39 if.then29 
%4730:	getelementptr	pattern %4729 
%4731:	load	%4730 
%4732:	sext	%4731 
%4733:	icmp	%4732 XXX 
%4734:	br	%4733 if.else86 if.then45 
%4738:	getelementptr	pattern %4737 
%4739:	load	%4738 
%4740:	sext	%4739 
%4741:	icmp	%4740 XXX 
%4742:	br	%4741 if.else57 if.then51 
%4759:	icmp	%4757 pattern_len 
%4760:	br	%4759 if.end66 if.then65 
Function: match_prefix(...) Location: (mongoose.c:907)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 4701 4702 4703 4704 4705 4714 4715 4716 4717 4718 4730 4731 4732 4733 4734 4738 4739 4740 4741 4742 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
%4714:	getelementptr	pattern %4713 
%4715:	load	%4714 
%4716:	sext	%4715 
%4717:	icmp	%4716 XXX 
%4718:	br	%4717 if.else39 if.then29 
%4730:	getelementptr	pattern %4729 
%4731:	load	%4730 
%4732:	sext	%4731 
%4733:	icmp	%4732 XXX 
%4734:	br	%4733 if.else86 if.then45 
%4738:	getelementptr	pattern %4737 
%4739:	load	%4738 
%4740:	sext	%4739 
%4741:	icmp	%4740 XXX 
%4742:	br	%4741 if.else57 if.then51 
Function: match_prefix(...) Location: (mongoose.c:901)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 4701 4702 4703 4704 4705 4714 4715 4716 4717 4718 4730 4731 4732 4733 4734 4738 4739 4740 4741 4742 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
%4714:	getelementptr	pattern %4713 
%4715:	load	%4714 
%4716:	sext	%4715 
%4717:	icmp	%4716 XXX 
%4718:	br	%4717 if.else39 if.then29 
%4730:	getelementptr	pattern %4729 
%4731:	load	%4730 
%4732:	sext	%4731 
%4733:	icmp	%4732 XXX 
%4734:	br	%4733 if.else86 if.then45 
%4738:	getelementptr	pattern %4737 
%4739:	load	%4738 
%4740:	sext	%4739 
%4741:	icmp	%4740 XXX 
%4742:	br	%4741 if.else57 if.then51 
Function: match_prefix(...) Location: (mongoose.c:899)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 4701 4702 4703 4704 4705 4714 4715 4716 4717 4718 4730 4731 4732 4733 4734 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
%4714:	getelementptr	pattern %4713 
%4715:	load	%4714 
%4716:	sext	%4715 
%4717:	icmp	%4716 XXX 
%4718:	br	%4717 if.else39 if.then29 
%4730:	getelementptr	pattern %4729 
%4731:	load	%4730 
%4732:	sext	%4731 
%4733:	icmp	%4732 XXX 
%4734:	br	%4733 if.else86 if.then45 
Function: match_prefix(...) Location: (mongoose.c:897)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 4701 4702 4703 4704 4705 4714 4715 4716 4717 4718 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
%4714:	getelementptr	pattern %4713 
%4715:	load	%4714 
%4716:	sext	%4715 
%4717:	icmp	%4716 XXX 
%4718:	br	%4717 if.else39 if.then29 
Function: match_prefix(...) Location: (mongoose.c:895)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 4701 4702 4703 4704 4705 4714 4715 4716 4717 4718 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
%4714:	getelementptr	pattern %4713 
%4715:	load	%4714 
%4716:	sext	%4715 
%4717:	icmp	%4716 XXX 
%4718:	br	%4717 if.else39 if.then29 
Function: match_prefix(...) Location: (mongoose.c:894)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 4701 4702 4703 4704 4705 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
%4701:	getelementptr	pattern %4700 
%4702:	load	%4701 
%4703:	sext	%4702 
%4704:	icmp	%4703 XXX 
%4705:	br	%4704 if.else land.lhs.true 
Function: match_prefix(...) Location: (mongoose.c:893)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4698 4699 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4698:	icmp	%4696 pattern_len 
%4699:	br	%4698 for.end for.body 
Function: match_prefix(...) Location: (mongoose.c:891)

---- Part 3: Path Intersection ----
[ 4666 4667 4669 4670 4671 4672 4673 4674 4680 ]
%4666:	sext	pattern_len 
%4667:	call	pattern XXX %4666 memchr 
%4669:	icmp	%4667 XXX 
%4670:	br	%4669 if.end if.then 
%4671:	ptrtoint	%4667 
%4672:	ptrtoint	pattern 
%4673:	sub	%4671 %4672 
%4674:	trunc	%4673 
%4680:	getelementptr	%4667 XXX 
Function: match_prefix(...) Location: (mongoose.c:885)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
%4064:	getelementptr	conn XXX XXX 
%4065:	load	%4064 
%4066:	getelementptr	%4065 XXX XXX 
%4067:	getelementptr	%4066 XXX XXX 
%4068:	load	%4067 
%4069:	getelementptr	conn XXX XXX 
%4070:	load	%4069 
%4071:	getelementptr	%4070 XXX XXX 
%4072:	getelementptr	%4071 XXX XXX 
%4073:	load	%4072 
%4074:	call	%4073 strlen 
%4075:	trunc	%4074 
%4076:	call	%4068 %4075 buf match_prefix 
%4077:	icmp	%4076 XXX 
%4078:	br	%4077 if.else land.lhs.true 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1820)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
%4064:	getelementptr	conn XXX XXX 
%4065:	load	%4064 
%4066:	getelementptr	%4065 XXX XXX 
%4067:	getelementptr	%4066 XXX XXX 
%4068:	load	%4067 
%4069:	getelementptr	conn XXX XXX 
%4070:	load	%4069 
%4071:	getelementptr	%4070 XXX XXX 
%4072:	getelementptr	%4071 XXX XXX 
%4073:	load	%4072 
%4074:	call	%4073 strlen 
%4075:	trunc	%4074 
%4076:	call	%4068 %4075 buf match_prefix 
%4077:	icmp	%4076 XXX 
%4078:	br	%4077 if.else land.lhs.true 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1819)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
%4064:	getelementptr	conn XXX XXX 
%4065:	load	%4064 
%4066:	getelementptr	%4065 XXX XXX 
%4067:	getelementptr	%4066 XXX XXX 
%4068:	load	%4067 
%4069:	getelementptr	conn XXX XXX 
%4070:	load	%4069 
%4071:	getelementptr	%4070 XXX XXX 
%4072:	getelementptr	%4071 XXX XXX 
%4073:	load	%4072 
%4074:	call	%4073 strlen 
%4075:	trunc	%4074 
%4076:	call	%4068 %4075 buf match_prefix 
%4077:	icmp	%4076 XXX 
%4078:	br	%4077 if.else land.lhs.true 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1818)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 4064 4065 4066 4067 4068 4069 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
%4064:	getelementptr	conn XXX XXX 
%4065:	load	%4064 
%4066:	getelementptr	%4065 XXX XXX 
%4067:	getelementptr	%4066 XXX XXX 
%4068:	load	%4067 
%4069:	getelementptr	conn XXX XXX 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1811)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 4064 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
%4064:	getelementptr	conn XXX XXX 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1810)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1807)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1800)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1799)

---- Part 3: Path Intersection ----
[ 4016 4017 4018 4019 4020 4023 4024 4026 4027 ]
%4016:	getelementptr	conn XXX XXX 
%4017:	load	%4016 
%4018:	getelementptr	%4017 XXX XXX 
%4019:	getelementptr	%4018 XXX XXX 
%4020:	load	%4019 
%4023:	phi	%4020 %4024 
%4024:	call	%4023 %3997 %3998 next_option 
%4026:	icmp	%4024 XXX 
%4027:	br	%4026 while.end while.body 
Function: convert_uri_to_file_name(...) Location: (mongoose.c:1798)

   # of detected potential vulnerabilities: 31
*********************************************************

*********************************************************
     Dangerous Function Analysis Result                  
   # of static dangerous function statements: 18

   # of detected potential vulnerabilities: 0
*********************************************************

